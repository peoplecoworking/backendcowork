"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheLogin = void 0;
const fs = __importStar(require("fs"));
const afip_apis_1 = require("../afip-apis");
const moment_1 = __importDefault(require("moment"));
const path = __importStar(require("path"));
const DEFAULT_CERTIFICATE = "./private/certificate/TEST/09.2021/afip-test.crt";
const DEFAULT_CERTIFICATE_KEY = "./private/certificate/TEST/09.2021/afip-test.key";
const DEFAULT_URLWSAAWSDL = "https://wsaahomo.afip.gov.ar/ws/services/LoginCms?WSDL";
const TICKET_PATH = "./cache/";
class CacheLogin {
    constructor() {
        this._tickets = {};
        this._certificatePath = DEFAULT_CERTIFICATE;
        this._certificateKey = DEFAULT_CERTIFICATE_KEY;
        this._wsaawsdl = DEFAULT_URLWSAAWSDL;
        this.getTicket = (serviceId) => {
            let ticket = this._tickets[serviceId];
            const promise = new Promise((resolve, reject) => {
                if (ticket && (0, moment_1.default)(ticket.header.expirationTime).isSameOrAfter((0, moment_1.default)())) {
                    return resolve(ticket);
                }
                const ticketPath = `${TICKET_PATH}${serviceId}-ticket.json`;
                if (fs.existsSync(ticketPath)) {
                    try {
                        const s = fs.readFileSync(`${TICKET_PATH}${serviceId}-ticket.json`, "utf8");
                        ticket = JSON.parse(s);
                    }
                    catch (err) {
                        console.error(err);
                    }
                }
                if (ticket && (0, moment_1.default)(ticket.header.expirationTime).isSameOrAfter((0, moment_1.default)())) {
                    return resolve(ticket);
                }
                return this.login(serviceId)
                    .then(ticket => resolve(ticket))
                    .catch(err => reject(err));
            });
            return promise;
        };
        this.loginTicket = new afip_apis_1.LoginTicket();
    }
    get certificatePath() {
        return this._certificatePath;
    }
    set certificatePath(path) {
        this._certificatePath = path;
    }
    get certificateKey() {
        return this._certificateKey;
    }
    set certificateKey(key) {
        this._certificateKey = key;
    }
    get wsaawsdl() {
        return this._wsaawsdl;
    }
    set wsaawsdl(url) {
        this._wsaawsdl = url;
    }
    static get Instance() {
        if (!CacheLogin.instance) {
            CacheLogin.instance = new CacheLogin();
        }
        return CacheLogin.instance;
    }
    checkFolder(pathToCheck) {
        const _pathToCheck = path.dirname(pathToCheck);
        if (fs.existsSync(_pathToCheck)) {
            return;
        }
        fs.mkdirSync(_pathToCheck);
    }
    login(serviceId) {
        return this.loginTicket.wsaaLogin(serviceId, this._wsaawsdl, this._certificatePath, this._certificateKey)
            .then(ticket => {
            try {
                this.checkFolder(TICKET_PATH);
                fs.writeFileSync(`${TICKET_PATH}${serviceId}-ticket.json`, JSON.stringify(ticket));
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(ticket);
        });
    }
}
exports.CacheLogin = CacheLogin;
