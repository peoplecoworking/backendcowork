"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemHarinaService = void 0;
const xml2js = __importStar(require("xml2js"));
const soap11_1 = require("./soap11");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("afip-apis:remHarinaService");
const envelope = {
    "soapenv:Envelope": {
        $: {
            "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
            "xmlns:rem": "http://ar.gob.afip.wsremharina/RemHarinaService/"
        },
        "soapenv:Header": undefined,
        "soapenv:Body": undefined,
    }
};
class RemHarinaService extends soap11_1.SoapService {
    constructor() {
        super(...arguments);
        this.dummy = (options, extraHeaders) => {
            debug("dummy;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/dummy";
            const builder = new xml2js.Builder({ headless: true });
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    return resolve(r["ns2:dummyResponse"]);
                })
                    .catch(err => {
                    return reject(err);
                });
            });
        };
        this.generarRemito = (input, options, extraHeaders) => {
            debug("generarRemito;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/generarRemito";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:generarRemitoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:generarRemitoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.autorizarRemito = (input, options, extraHeaders) => {
            debug("autorizarRemito;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/autorizarRemito";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:autorizarRemitoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:autorizarRemitoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.anularRemito = (input, options, extraHeaders) => {
            debug("anularRemito;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/anularRemito";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:anularRemitoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:anularRemitoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.emitirRemito = (input, options, extraHeaders) => {
            debug("emitirRemito;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/emitirRemito";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:emitirRemitoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:emitirRemitoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.registrarRecepcion = (input, options, extraHeaders) => {
            debug("registrarRecepcion;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/registrarRecepcion";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:registrarRecepcionRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:registrarRecepcionResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.modificarViaje = (input, options, extraHeaders) => {
            debug("modificarViaje;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/modificarViaje";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:modificarViajeRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:modificarViajeResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.informarContingencia = (input, options, extraHeaders) => {
            debug("informarContingencia;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/informarContingencia";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:informarContingenciaRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:informarContingenciaResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarUltimoRemitoEmitido = (input, options, extraHeaders) => {
            debug("consultarUltimoRemitoEmitido;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarUltimoRemitoEmitido";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarUltimoRemitoEmitidoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarUltimoRemitoEmitidoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarRemito = (input, options, extraHeaders) => {
            debug("consultarRemito;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarRemito";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarRemitoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarRemitoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarTiposComprobante = (input, options, extraHeaders) => {
            debug("consultarTiposComprobante;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarTiposComprobante";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarTiposComprobanteRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarTiposComprobanteResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarTiposEstado = (input, options, extraHeaders) => {
            debug("consultarTiposEstado;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarTiposEstado";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarTiposEstadoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarTiposEstadoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarTiposContingencia = (input, options, extraHeaders) => {
            debug("consultarTiposContingencia;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarTiposContingencia";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarTiposContingenciaRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarTiposContingenciaResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarCodigosDomicilio = (input, options, extraHeaders) => {
            debug("consultarTiposContingencia;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarCodigosDomicilio";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarCodigosDomicilioRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarCodigosDomicilioResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarPuntosEmision = (input, options, extraHeaders) => {
            debug("consultarPuntosEmision;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarPuntosEmision";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarPuntosEmisionRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarPuntosEmisionResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarTiposMercaderia = (input, options, extraHeaders) => {
            debug("consultarTiposMercaderia;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarTiposMercaderia";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarTiposMercaderiaRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarTiposMercaderiaResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarUnidadesVenta = (input, options, extraHeaders) => {
            debug("consultarUnidadesVenta;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarUnidadesVenta";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarUnidadesVentaRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarUnidadesVentaResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarTiposEmbalaje = (input, options, extraHeaders) => {
            debug("consultarTiposEmbalaje;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarTiposEmbalaje";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarTiposEmbalajeRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarTiposEmbalajeResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarRemitosEmisor = (input, options, extraHeaders) => {
            debug("consultarRemitosEmisor;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarRemitosEmisor";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarRemitosEmisorRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarRemitosEmisorResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarRemitosAutorizador = (input, options, extraHeaders) => {
            debug("consultarRemitosAutorizador;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarRemitosAutorizador";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarRemitosAutorizadorRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarRemitosAutorizadorResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarRemitosReceptor = (input, options, extraHeaders) => {
            debug("consultarRemitosReceptor;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarRemitosReceptor";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarRemitosReceptorRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarRemitosReceptorResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarEstadosRemito = (input, options, extraHeaders) => {
            debug("consultarEstadosRemito;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarEstadosRemito";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarEstadosRemitoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarEstadosRemitoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.registrarReingreso = (input, options, extraHeaders) => {
            debug("registrarReingreso;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/registrarReingreso";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:registrarReingresoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:registrarReingresoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.registrarRedestino = (input, options, extraHeaders) => {
            debug("registrarRedestino;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/registrarRedestino";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:registrarRedestinoRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:registrarRedestinoResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarPaises = (input, options, extraHeaders) => {
            debug("consultarPaises;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarPaises";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarPaisesRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarPaisesResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarAduanas = (input, options, extraHeaders) => {
            debug("consultarAduanas;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarAduanas";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarAduanasRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarAduanasResponse"]))
                    .catch(err => reject(err));
            });
        };
        this.consultarProvincias = (input, options, extraHeaders) => {
            debug("registrarRedestino;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gob.afip.wsremharina/RemHarinaService/consultarProvincias";
            const builder = new xml2js.Builder({ headless: true });
            envelope["soapenv:Envelope"]["soapenv:Body"] = { "rem:consultarProvinciasRequest": input };
            const soapEnvelope = builder.buildObject(envelope);
            debug("dummy;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => resolve(r["ns2:consultarProvinciasResponse"]))
                    .catch(err => reject(err));
            });
        };
    }
    static get serviceId() {
        return "wsremharina";
    }
    static get produccionWSDL() {
        return "https://serviciosjava.afip.gob.ar/wsremharina/RemHarinaService?wsdl";
    }
    static get testWSDL() {
        return "https://fwshomo.afip.gov.ar/wsremharina/RemHarinaService?wsdl";
    }
}
exports.RemHarinaService = RemHarinaService;
