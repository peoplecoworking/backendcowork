"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoapService = exports.SoapFaultError = void 0;
const request = __importStar(require("request"));
const Url = __importStar(require("url"));
const xml2js = __importStar(require("xml2js"));
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("afip-apis:soap11");
const error_server_class_1 = require("../shared/error.server.class");
class SoapFaultError extends error_server_class_1.BaseError {
    constructor(code, id, message, extra) {
        super(code, id, message, extra);
        this.name = "SoapFaultError";
    }
}
exports.SoapFaultError = SoapFaultError;
function tagNameProcessor(name) {
    return name.substring(0, 8).toLocaleLowerCase() === "soapenv:" ? name.substring(8, name.length).toLocaleLowerCase() : name.substring(0, 5).toLocaleLowerCase() === "soap:" ? name.substring(5, name.length).toLocaleLowerCase() : name.substring(0, 2).toLocaleLowerCase() === "s:" ? name.substring(2, name.length).toLocaleLowerCase() : name;
}
function errorTagNameProcessor(name) {
    return name.substring(0, 9).toLocaleLowerCase() === "ns2:fault" ? name.substring(4, name.length).toLocaleLowerCase() : name;
}
const defaultParserOptions = {
    explicitRoot: false, explicitArray: false, ignoreAttrs: true,
    tagNameProcessors: [tagNameProcessor, errorTagNameProcessor],
};
class SoapService {
    constructor(wsdlUrl) {
        this.url = wsdlUrl;
        debug("url:%s", this.url);
    }
    get url() {
        return this._url;
    }
    set url(value) {
        const __url = Url.parse(value);
        this._url = `${__url.protocol}//${__url.host}${__url.pathname}`;
    }
    invoke(soapEnvelope, options, extraHeaders) {
        const headers = {
            "User-Agent": "request",
            "Content-Type": "text/xml;charset=UTF-8"
        };
        if (extraHeaders) {
            Object.keys(extraHeaders).forEach((key) => {
                const value = extraHeaders[key];
                headers[key] = value;
            });
        }
        debug("invoke;url:%s", this._url);
        debug("invoke;headers:%s", JSON.stringify(headers));
        debug("invoke;body:%s", soapEnvelope);
        const p = new Promise((resolve, reject) => {
            return request.post({
                url: this._url,
                headers: headers,
                body: soapEnvelope
            }, (err, httpResponse, body) => {
                if (err) {
                    return reject(new error_server_class_1.BaseError(500, "http-action-error", "Ocurrio un error en una acción http", err));
                }
                const parser = new xml2js.Parser(defaultParserOptions);
                debug("invoke;httpResponse.statusCode:%s", httpResponse.statusCode);
                debug("invoke;body:%s", body);
                if (httpResponse.statusCode < 400) {
                    return parser.parseString(body, (err, result) => {
                        if (err) {
                            return reject(new error_server_class_1.BaseError(500, "xml-parser-error", "Error al procesar datos xml", err));
                        }
                        const r = result.body;
                        debug("invoke;success;result:%s", JSON.stringify(r));
                        return resolve(r);
                    });
                }
                else {
                    return parser.parseString(httpResponse.body, (err, result) => {
                        if (err) {
                            return reject(new error_server_class_1.BaseError(500, "xml-parser-error", "Error al procesar datos xml", err));
                        }
                        debug("invoke;error;result:%s", JSON.stringify(result));
                        const r = result.body || { fault: { statusCode: httpResponse.statusCode } };
                        r.fault.statusCode = httpResponse.statusCode;
                        return reject(new SoapFaultError(500, "soap-fault-error", "El servicio devolvió un error", r));
                    });
                }
            });
        });
        return p;
    }
}
exports.SoapService = SoapService;
