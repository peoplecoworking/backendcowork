"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WsLpgv120 = void 0;
const debug_1 = __importDefault(require("debug"));
const xml2js = __importStar(require("xml2js"));
const error_server_class_1 = require("../shared/error.server.class");
const soap11_1 = require("./soap11");
const debug = (0, debug_1.default)("afip-apis:lpgservicev120");
class WsLpgv120 extends soap11_1.SoapService {
    constructor() {
        super(...arguments);
        this.baseSOAPAction = "http://serviciosjava.afip.gob.ar/wslpg/";
        this.dummy = (extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = `${this.baseSOAPAction}dummy`;
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soapenv:Envelope": {
                    $: {
                        "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
                    },
                    "soapenv:Header": undefined,
                    "soapenv:Body": undefined,
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("soapenv:Envelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return this.emptyResponse();
                    }
                    return resolve(r["ns2:dummyResp"]);
                })
                    .catch(err => reject(err));
            });
        };
        this.liquidacionAutorizar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = `${this.baseSOAPAction}liquidacionAutorizar`;
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soapenv:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soapenv:Header": undefined,
                    "soapenv:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECAEAConsultar: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return this.emptyResponse();
                    }
                    return resolve(r["wsl:liquidacionResp"]);
                })
                    .catch(err => reject(err));
            });
        };
        this.provinciasConsultar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = `${this.baseSOAPAction}provinciasConsultar`;
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soapenv:Envelope": {
                    $: {
                        "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
                        "xmlns:wsl": "http://serviciosjava.afip.gob.ar/wslpg/"
                    },
                    "soapenv:Header": undefined,
                    "soapenv:Body": {
                        "wsl:provinciasReq": input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("soapenv:Envelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return this.emptyResponse();
                    }
                    return resolve(r["ns2:provinciasResp"]);
                })
                    .catch(err => reject(err));
            });
        };
        this.localidadXProvinciaConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.tipoOperacionXActividadConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.puertoConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.tipoActividadConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.tipoActividadRepresentadoConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.tipoCertificadoDepositoConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.tipoRetencionConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.tipoDeduccionConsultar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = `${this.baseSOAPAction}tipoDeduccionConsultar`;
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soapenv:Envelope": {
                    $: {
                        "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
                        "xmlns:wsl": "http://serviciosjava.afip.gob.ar/wslpg/"
                    },
                    "soapenv:Header": undefined,
                    "soapenv:Body": {
                        "wsl:tipoDeduccionReq": input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("soapenv:Envelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return this.emptyResponse();
                    }
                    return resolve(r["ns2:tipoDeduccionResp"]);
                })
                    .catch(err => reject(err));
            });
        };
        this.tipoGranoConsultar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = `${this.baseSOAPAction}tipoGranoConsultar`;
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soapenv:Envelope": {
                    $: {
                        "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
                        "xmlns:wsl": "http://serviciosjava.afip.gob.ar/wslpg/"
                    },
                    "soapenv:Header": undefined,
                    "soapenv:Body": {
                        "wsl:tipoGranoReq": input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("soapenv:Envelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return this.emptyResponse();
                    }
                    return resolve(r["ns2:tipoGranoResp"]);
                })
                    .catch(err => reject(err));
            });
        };
        this.codigoGradoReferenciaConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.codigoGradoEntregadoXTipoGranoConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.campaniasConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.liquidacionXCoeConsultar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = `${this.baseSOAPAction}liquidacionXCoeConsultar`;
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soapenv:Envelope": {
                    $: {
                        "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
                        "xmlns:wsl": "http://serviciosjava.afip.gob.ar/wslpg/"
                    },
                    "soapenv:Header": undefined,
                    "soapenv:Body": {
                        "wsl:liqConsXCoeReq": input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("soapenv:Envelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return this.emptyResponse();
                    }
                    return resolve(r["ns2:liqConsXCoeResp"]);
                })
                    .catch(err => reject(err));
            });
        };
        this.liquidacionXNroOrdenConsultar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = `${this.baseSOAPAction}liquidacionXNroOrdenConsultar`;
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soapenv:Envelope": {
                    $: {
                        "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/",
                        "xmlns:wsl": "http://serviciosjava.afip.gob.ar/wslpg/"
                    },
                    "soapenv:Header": undefined,
                    "soapenv:Body": {
                        "wsl:liqConsXNroOrdenReq": input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("soapenv:Envelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return this.emptyResponse();
                    }
                    return resolve(r["ns2:liqConsXNroOrdenResp"]);
                })
                    .catch(err => reject(err));
            });
        };
        this.liquidacionUltimoNroOrdenConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.liquidacionAnular = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.liquidacionAjustarUnificado = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.liquidacionAjustarContrato = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.ajusteXCoeConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.asociarLiquidacionAContrato = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.liquidacionPorContratoConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.ajustePorContratoConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.ajusteXNroOrdenConsultar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgAutorizar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgConsultarXCoe = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgConsultarXNroOrden = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgConsultarUltimoNroOrden = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgAnular = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgAjustarXCoe = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgAjustarXContrato = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgAsociarAContrato = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lsgConsultarXContrato = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgAutorizar = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgBuscarCtg = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgBuscarCertConSaldoDisponible = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgConsultarUltimoNroOrden = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgSolicitarAnulacion = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgConfirmarAnulacion = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgConsultarXCoe = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgConsultarXNroOrden = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.cgInformarCalidad = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lpgAutorizarAnticipo = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
        this.lpgCancelarAnticipo = (input, options, extraHeaders) => {
            return Promise.reject(new error_server_class_1.BaseError(500, "not-implemented", "No implementado", undefined));
        };
    }
    static get serviceId() {
        return "wslpg";
    }
    static get produccionWSDL() {
        return "https://serviciosjava.afip.gob.ar/wslpg/LpgService?wsdl";
    }
    static get testWSDL() {
        return "https://fwshomo.afip.gov.ar/wslpg/LpgService?wsdl";
    }
    emptyResponse() {
        return Promise.reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
    }
}
exports.WsLpgv120 = WsLpgv120;
