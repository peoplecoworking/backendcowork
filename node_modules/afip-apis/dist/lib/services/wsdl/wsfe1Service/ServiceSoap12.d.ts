export interface IFECAESolicitarInput {
    Auth: ServiceSoap12Types.IAuth;
    FeCAEReq: ServiceSoap12Types.IFeCAEReq;
}
export interface IFECAESolicitarOutput {
    FECAESolicitarResult: ServiceSoap12Types.IFECAESolicitarResult;
}
export interface IFECompTotXRequestInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFECompTotXRequestOutput {
    FECompTotXRequestResult: ServiceSoap12Types.IFECompTotXRequestResult;
}
export interface IFEDummyInput {
}
export interface IFEDummyOutput {
    FEDummyResult: ServiceSoap12Types.IFEDummyResult;
}
export interface IFECompUltimoAutorizadoInput {
    Auth: ServiceSoap12Types.IAuth;
    PtoVta: number;
    CbteTipo: number;
}
export interface IFECompUltimoAutorizadoOutput {
    FECompUltimoAutorizadoResult: ServiceSoap12Types.IFECompUltimoAutorizadoResult;
}
export interface IFECompConsultarInput {
    Auth: ServiceSoap12Types.IAuth;
    FeCompConsReq: ServiceSoap12Types.IFeCompConsReq;
}
export interface IFECompConsultarOutput {
    FECompConsultarResult: ServiceSoap12Types.IFECompConsultarResult;
}
export interface IFECAEARegInformativoInput {
    Auth: ServiceSoap12Types.IAuth;
    FeCAEARegInfReq: ServiceSoap12Types.IFeCAEARegInfReq;
}
export interface IFECAEARegInformativoOutput {
    FECAEARegInformativoResult: ServiceSoap12Types.IFECAEARegInformativoResult;
}
export interface IFECAEASolicitarInput {
    Auth: ServiceSoap12Types.IAuth;
    Periodo: number;
    Orden: number;
}
export interface IFECAEASolicitarOutput {
    FECAEASolicitarResult: ServiceSoap12Types.IFECAEASolicitarResult;
}
export interface IFECAEASinMovimientoConsultarInput {
    Auth: ServiceSoap12Types.IAuth;
    CAEA: string;
    PtoVta: number;
}
export interface IFECAEASinMovimientoConsultarOutput {
    FECAEASinMovimientoConsultarResult: ServiceSoap12Types.IFECAEASinMovimientoConsultarResult;
}
export interface IFECAEASinMovimientoInformarInput {
    Auth: ServiceSoap12Types.IAuth;
    PtoVta: number;
    CAEA: string;
}
export interface IFECAEASinMovimientoInformarOutput {
    FECAEASinMovimientoInformarResult: ServiceSoap12Types.IFECAEASinMovimientoInformarResult;
}
export interface IFECAEAConsultarInput {
    Auth: ServiceSoap12Types.IAuth;
    Periodo: number;
    Orden: number;
}
export interface IFECAEAConsultarOutput {
    FECAEAConsultarResult: ServiceSoap12Types.IFECAEAConsultarResult;
}
export interface IFEParamGetCotizacionInput {
    Auth: ServiceSoap12Types.IAuth;
    MonId: string;
}
export interface IFEParamGetCotizacionOutput {
    FEParamGetCotizacionResult: ServiceSoap12Types.IFEParamGetCotizacionResult;
}
export interface IFEParamGetTiposTributosInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposTributosOutput {
    FEParamGetTiposTributosResult: ServiceSoap12Types.IFEParamGetTiposTributosResult;
}
export interface IFEParamGetTiposMonedasInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposMonedasOutput {
    FEParamGetTiposMonedasResult: ServiceSoap12Types.IFEParamGetTiposMonedasResult;
}
export interface IFEParamGetTiposIvaInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposIvaOutput {
    FEParamGetTiposIvaResult: ServiceSoap12Types.IFEParamGetTiposIvaResult;
}
export interface IFEParamGetTiposOpcionalInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposOpcionalOutput {
    FEParamGetTiposOpcionalResult: ServiceSoap12Types.IFEParamGetTiposOpcionalResult;
}
export interface IFEParamGetTiposConceptoInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposConceptoOutput {
    FEParamGetTiposConceptoResult: ServiceSoap12Types.IFEParamGetTiposConceptoResult;
}
export interface IFEParamGetPtosVentaInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetPtosVentaOutput {
    FEParamGetPtosVentaResult: ServiceSoap12Types.IFEParamGetPtosVentaResult;
}
export interface IFEParamGetTiposCbteInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposCbteOutput {
    FEParamGetTiposCbteResult: ServiceSoap12Types.IFEParamGetTiposCbteResult;
}
export interface IFEParamGetTiposDocInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposDocOutput {
    FEParamGetTiposDocResult: ServiceSoap12Types.IFEParamGetTiposDocResult;
}
export interface IFEParamGetTiposPaisesInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IFEParamGetTiposPaisesOutput {
    FEParamGetTiposPaisesResult: ServiceSoap12Types.IFEParamGetTiposPaisesResult;
}
export interface IServiceSoap12Soap {
    FECAESolicitar: (input: IFECAESolicitarInput, cb: (err: any | null, result: IFECAESolicitarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECompTotXRequest: (input: IFECompTotXRequestInput, cb: (err: any | null, result: IFECompTotXRequestOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEDummy: (input: IFEDummyInput, cb: (err: any | null, result: IFEDummyOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECompUltimoAutorizado: (input: IFECompUltimoAutorizadoInput, cb: (err: any | null, result: IFECompUltimoAutorizadoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECompConsultar: (input: IFECompConsultarInput, cb: (err: any | null, result: IFECompConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECAEARegInformativo: (input: IFECAEARegInformativoInput, cb: (err: any | null, result: IFECAEARegInformativoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECAEASolicitar: (input: IFECAEASolicitarInput, cb: (err: any | null, result: IFECAEASolicitarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECAEASinMovimientoConsultar: (input: IFECAEASinMovimientoConsultarInput, cb: (err: any | null, result: IFECAEASinMovimientoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECAEASinMovimientoInformar: (input: IFECAEASinMovimientoInformarInput, cb: (err: any | null, result: IFECAEASinMovimientoInformarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FECAEAConsultar: (input: IFECAEAConsultarInput, cb: (err: any | null, result: IFECAEAConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetCotizacion: (input: IFEParamGetCotizacionInput, cb: (err: any | null, result: IFEParamGetCotizacionOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposTributos: (input: IFEParamGetTiposTributosInput, cb: (err: any | null, result: IFEParamGetTiposTributosOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposMonedas: (input: IFEParamGetTiposMonedasInput, cb: (err: any | null, result: IFEParamGetTiposMonedasOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposIva: (input: IFEParamGetTiposIvaInput, cb: (err: any | null, result: IFEParamGetTiposIvaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposOpcional: (input: IFEParamGetTiposOpcionalInput, cb: (err: any | null, result: IFEParamGetTiposOpcionalOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposConcepto: (input: IFEParamGetTiposConceptoInput, cb: (err: any | null, result: IFEParamGetTiposConceptoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetPtosVenta: (input: IFEParamGetPtosVentaInput, cb: (err: any | null, result: IFEParamGetPtosVentaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposCbte: (input: IFEParamGetTiposCbteInput, cb: (err: any | null, result: IFEParamGetTiposCbteOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposDoc: (input: IFEParamGetTiposDocInput, cb: (err: any | null, result: IFEParamGetTiposDocOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    FEParamGetTiposPaises: (input: IFEParamGetTiposPaisesInput, cb: (err: any | null, result: IFEParamGetTiposPaisesOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
}
export declare namespace ServiceSoap12Types {
    interface IAuth {
        Token: string;
        Sign: string;
        Cuit: number;
    }
    interface IFeCabReq {
        CantReg: number;
        PtoVta: number;
        CbteTipo: number;
    }
    interface ICbteAsoc {
        Tipo: number;
        PtoVta: number;
        Nro: number;
        Cuit?: string;
        CbteFch?: string;
    }
    interface ICbtesAsoc {
        CbteAsoc: ServiceSoap12Types.ICbteAsoc[];
    }
    interface ITributo {
        Id: number;
        Desc: string;
        BaseImp: number;
        Alic: number;
        Importe: number;
    }
    interface ITributos {
        Tributo: ServiceSoap12Types.ITributo[];
    }
    interface IAlicIva {
        Id: number;
        BaseImp: number;
        Importe: number;
    }
    interface IIva {
        AlicIva: ServiceSoap12Types.IAlicIva[];
    }
    interface IOpcional {
        Id: string;
        Valor: string;
    }
    interface IOpcionales {
        Opcional: ServiceSoap12Types.IOpcional[];
    }
    interface IComprador {
        DocTipo: number;
        DocNro: number;
        Porcentaje: number;
    }
    interface ICompradores {
        Comprador: ServiceSoap12Types.IComprador[];
    }
    interface IPeriodoAsoc {
        FchDesde: string;
        FchHasta: string;
    }
    interface IFECAEDetRequest {
        Concepto: number;
        DocTipo: number;
        DocNro: number;
        CbteDesde: number;
        CbteHasta: number;
        CbteFch?: string;
        ImpTotal: number;
        ImpTotConc: number;
        ImpNeto: number;
        ImpOpEx: number;
        ImpTrib: number;
        ImpIVA: number;
        FchServDesde?: string;
        FchServHasta?: string;
        FchVtoPago: string;
        MonId: string;
        MonCotiz: number;
        CbtesAsoc?: ServiceSoap12Types.ICbtesAsoc;
        Tributos?: ServiceSoap12Types.ITributos;
        Iva: ServiceSoap12Types.IIva;
        Opcionales?: ServiceSoap12Types.IOpcionales;
        Compradores?: ServiceSoap12Types.ICompradores;
        PeriodoAsoc?: ServiceSoap12Types.IPeriodoAsoc;
    }
    interface IFeCAEReq {
        FeCabReq: ServiceSoap12Types.IFeCabReq;
        FeDetReq: {
            FECAEDetRequest: ServiceSoap12Types.IFECAEDetRequest[];
        };
    }
    interface IFeCabResp {
        Cuit: number;
        PtoVta: number;
        CbteTipo: number;
        FchProceso: string;
        CantReg: number;
        Resultado: string;
        Reproceso: string;
    }
    interface IObs {
        Code: number;
        Msg: string;
    }
    interface IObservaciones {
        Obs: ServiceSoap12Types.IObs[];
    }
    interface IFECAEDetResponse {
        Concepto: number;
        DocTipo: number;
        DocNro: number;
        CbteDesde: number;
        CbteHasta: number;
        CbteFch: string;
        Resultado: string;
        Observaciones: ServiceSoap12Types.IObservaciones;
        CAE: string;
        CAEFchVto: string;
    }
    interface IEvt {
        Code: number;
        Msg: string;
    }
    interface IEvents {
        Evt: ServiceSoap12Types.IEvt[];
    }
    interface IErr {
        Code: number;
        Msg: string;
    }
    interface IErrors {
        Err: ServiceSoap12Types.IErr[];
    }
    interface IFECAESolicitarResult {
        FeCabResp: ServiceSoap12Types.IFeCabResp;
        FeDetResp: {
            FECAEDetResponse: ServiceSoap12Types.IFECAEDetResponse[];
        };
        Events: ServiceSoap12Types.IEvents;
        Errors: ServiceSoap12Types.IErrors;
    }
    interface IFECompTotXRequestResult {
        RegXReq: number;
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IFEDummyResult {
        AppServer: string;
        DbServer: string;
        AuthServer: string;
    }
    interface IFECompUltimoAutorizadoResult {
        PtoVta: number;
        CbteTipo: number;
        CbteNro: number;
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IFeCompConsReq {
        CbteTipo: number;
        CbteNro: number;
        PtoVta: number;
    }
    interface IFECompConsultarResult {
        ResultGet: {
            Concepto: number;
            DocTipo: number;
            DocNro: number;
            CbteDesde: number;
            CbteHasta: number;
            CbteFch: string;
            ImpTotal: number;
            ImpTotConc: number;
            ImpNeto: number;
            ImpOpEx: number;
            ImpTrib: number;
            ImpIVA: number;
            FchServDesde: string;
            FchServHasta: string;
            FchVtoPago: string;
            MonId: string;
            MonCotiz: number;
            CbtesAsoc: ServiceSoap12Types.ICbtesAsoc;
            Tributos: ServiceSoap12Types.ITributos;
            Iva: ServiceSoap12Types.IIva;
            Opcionales: ServiceSoap12Types.IOpcionales;
            Compradores: ServiceSoap12Types.ICompradores;
            PeriodoAsoc: ServiceSoap12Types.IPeriodoAsoc;
            Resultado: string;
            CodAutorizacion: string;
            EmisionTipo: string;
            FchVto: string;
            FchProceso: string;
            Observaciones: ServiceSoap12Types.IObservaciones;
            PtoVta: number;
            CbteTipo: number;
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IFECAEADetRequest {
        Concepto: number;
        DocTipo: number;
        DocNro: number;
        CbteDesde: number;
        CbteHasta: number;
        CbteFch?: string;
        ImpTotal: number;
        ImpTotConc: number;
        ImpNeto: number;
        ImpOpEx: number;
        ImpTrib: number;
        ImpIVA?: number;
        FchServDesde?: string;
        FchServHasta?: string;
        FchVtoPago?: string;
        MonId: string;
        MonCotiz: number;
        CbtesAsoc?: ServiceSoap12Types.ICbtesAsoc;
        Tributos?: ServiceSoap12Types.ITributos;
        Iva?: ServiceSoap12Types.IIva;
        Opcionales?: ServiceSoap12Types.IOpcionales;
        Compradores?: ServiceSoap12Types.ICompradores;
        PeriodoAsoc?: ServiceSoap12Types.IPeriodoAsoc;
        CAEA: string;
        CbteFchHsGen?: string;
    }
    interface IFeCAEARegInfReq {
        FeCabReq: ServiceSoap12Types.IFeCabReq;
        FeDetReq: {
            FECAEADetRequest: ServiceSoap12Types.IFECAEADetRequest[];
        };
    }
    interface IFECAEADetResponse {
        Concepto: number;
        DocTipo: number;
        DocNro: number;
        CbteDesde: number;
        CbteHasta: number;
        CbteFch: string;
        Resultado: string;
        Observaciones: ServiceSoap12Types.IObservaciones;
        CAEA: string;
    }
    interface IFECAEARegInformativoResult {
        FeCabResp: ServiceSoap12Types.IFeCabResp;
        FeDetResp: {
            FECAEADetResponse: ServiceSoap12Types.IFECAEADetResponse[];
        };
        Events: ServiceSoap12Types.IEvents;
        Errors: ServiceSoap12Types.IErrors;
    }
    interface IFECAEASolicitarResult {
        ResultGet: {
            CAEA: string;
            Periodo: number;
            Orden: number;
            FchVigDesde: string;
            FchVigHasta: string;
            FchTopeInf: string;
            FchProceso: string;
            Observaciones: ServiceSoap12Types.IObservaciones;
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IFECAEASinMov {
        CAEA: string;
        FchProceso: string;
        PtoVta: number;
    }
    interface IFECAEASinMovimientoConsultarResult {
        ResultGet: {
            FECAEASinMov: ServiceSoap12Types.IFECAEASinMov[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IFECAEASinMovimientoInformarResult {
        CAEA: string;
        FchProceso: string;
        PtoVta: number;
        Resultado: string;
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IFECAEAConsultarResult {
        ResultGet: {
            CAEA: string;
            Periodo: number;
            Orden: number;
            FchVigDesde: string;
            FchVigHasta: string;
            FchTopeInf: string;
            FchProceso: string;
            Observaciones: ServiceSoap12Types.IObservaciones;
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IFEParamGetCotizacionResult {
        ResultGet: {
            MonId: string;
            MonCotiz: number;
            FchCotiz: string;
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface ITributoTipo {
        Id: number;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IFEParamGetTiposTributosResult {
        ResultGet: {
            TributoTipo: ServiceSoap12Types.ITributoTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IMoneda {
        Id: string;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IFEParamGetTiposMonedasResult {
        ResultGet: {
            Moneda: ServiceSoap12Types.IMoneda[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IIvaTipo {
        Id: string;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IFEParamGetTiposIvaResult {
        ResultGet: {
            IvaTipo: ServiceSoap12Types.IIvaTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IOpcionalTipo {
        Id: string;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IFEParamGetTiposOpcionalResult {
        ResultGet: {
            OpcionalTipo: ServiceSoap12Types.IOpcionalTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IConceptoTipo {
        Id: number;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IFEParamGetTiposConceptoResult {
        ResultGet: {
            ConceptoTipo: ServiceSoap12Types.IConceptoTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IPtoVenta {
        Nro: number;
        EmisionTipo: string;
        Bloqueado: string;
        FchBaja: string;
    }
    interface IFEParamGetPtosVentaResult {
        ResultGet: {
            PtoVenta: ServiceSoap12Types.IPtoVenta[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface ICbteTipo {
        Id: number;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IFEParamGetTiposCbteResult {
        ResultGet: {
            CbteTipo: ServiceSoap12Types.ICbteTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IDocTipo {
        Id: number;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IFEParamGetTiposDocResult {
        ResultGet: {
            DocTipo: ServiceSoap12Types.IDocTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IPaisTipo {
        Id: number;
        Desc: string;
    }
    interface IFEParamGetTiposPaisesResult {
        ResultGet: {
            PaisTipo: ServiceSoap12Types.IPaisTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
}
