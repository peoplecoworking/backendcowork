declare type long = number;
declare type int = number;
declare type double = number;
export interface IComprobantesModalidadConsultarInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IComprobantesModalidadConsultarOutput {
    ComprobantesModalidadConsultarResult: ServiceSoap12Types.IComprobantesModalidadConsultarResult;
}
export interface IComprobantesTipoConsultarInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IComprobantesTipoConsultarOutput {
    ComprobantesTipoConsultarResult: ServiceSoap12Types.IComprobantesTipoConsultarResult;
}
export interface IDocumentosTipoConsultarInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IDocumentosTipoConsultarOutput {
    DocumentosTipoConsultarResult: ServiceSoap12Types.IDocumentosTipoConsultarResult;
}
export interface IOpcionalesTipoConsultarInput {
    Auth: ServiceSoap12Types.IAuth;
}
export interface IOpcionalesTipoConsultarOutput {
    OpcionalesTipoConsultarResult: ServiceSoap12Types.IOpcionalesTipoConsultarResult;
}
export interface IComprobanteConstatarInput {
    Auth: ServiceSoap12Types.IAuth;
    CmpReq: ServiceSoap12Types.ICmpReq;
}
export interface IComprobanteConstatarOutput {
    ComprobanteConstatarResult: ServiceSoap12Types.IComprobanteConstatarResult;
}
export interface IComprobanteDummyInput {
}
export interface IComprobanteDummyOutput {
    ComprobanteDummyResult: ServiceSoap12Types.IComprobanteDummyResult;
}
export interface IServiceSoap12Soap {
    ComprobantesModalidadConsultar: (input: IComprobantesModalidadConsultarInput, cb: (err: any | null, result: IComprobantesModalidadConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    ComprobantesTipoConsultar: (input: IComprobantesTipoConsultarInput, cb: (err: any | null, result: IComprobantesTipoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    DocumentosTipoConsultar: (input: IDocumentosTipoConsultarInput, cb: (err: any | null, result: IDocumentosTipoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    OpcionalesTipoConsultar: (input: IOpcionalesTipoConsultarInput, cb: (err: any | null, result: IOpcionalesTipoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    ComprobanteConstatar: (input: IComprobanteConstatarInput, cb: (err: any | null, result: IComprobanteConstatarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    ComprobanteDummy: (input: IComprobanteDummyInput, cb: (err: any | null, result: IComprobanteDummyOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
}
export declare namespace ServiceSoap12Types {
    interface IAuth {
        Token: string;
        Sign: string;
        Cuit: long;
    }
    interface IFacModTipo {
        Cod: string;
        Desc: string;
        FchDesde: string;
        FchHasta: string;
    }
    interface IErr {
        Code: int;
        Msg: string;
    }
    interface IErrors {
        Err: ServiceSoap12Types.IErr[];
    }
    interface IEvt {
        Code: int;
        Msg: string;
    }
    interface IEvents {
        Evt: ServiceSoap12Types.IEvt[];
    }
    interface IComprobantesModalidadConsultarResult {
        ResultGet: {
            FacModTipo: ServiceSoap12Types.IFacModTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface ICbteTipo {
        Id: int;
        Desc: string;
    }
    interface IComprobantesTipoConsultarResult {
        ResultGet: {
            CbteTipo: ServiceSoap12Types.ICbteTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IDocTipo {
        Id: string;
        Desc: string;
    }
    interface IDocumentosTipoConsultarResult {
        ResultGet: {
            DocTipo: ServiceSoap12Types.IDocTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IOpcionalTipo {
        Id: string;
        Desc: string;
    }
    interface IOpcionalesTipoConsultarResult {
        ResultGet: {
            OpcionalTipo: ServiceSoap12Types.IOpcionalTipo[];
        };
        Errors: ServiceSoap12Types.IErrors;
        Events: ServiceSoap12Types.IEvents;
    }
    interface IOpcional {
        Id: string;
        Valor: string;
    }
    interface IOpcionales {
        Opcional: ServiceSoap12Types.IOpcional[];
    }
    interface ICmpReq {
        CbteModo: string;
        CuitEmisor: long;
        PtoVta: int;
        CbteTipo: int;
        CbteNro: long;
        CbteFch: string;
        ImpTotal: double;
        CodAutorizacion: string;
        DocTipoReceptor: string;
        DocNroReceptor: string;
        Opcionales?: ServiceSoap12Types.IOpcionales;
    }
    interface ICmpResp {
        CbteModo: string;
        CuitEmisor: long;
        PtoVta: int;
        CbteTipo: int;
        CbteNro: long;
        CbteFch: string;
        ImpTotal: double;
        CodAutorizacion: string;
        DocTipoReceptor: string;
        DocNroReceptor: string;
        Opcionales: ServiceSoap12Types.IOpcionales;
    }
    interface IObs {
        Code: int;
        Msg: string;
    }
    interface IObservaciones {
        Obs: ServiceSoap12Types.IObs[];
    }
    interface IComprobanteConstatarResult {
        CmpResp: ServiceSoap12Types.ICmpResp;
        Resultado: string;
        Observaciones: ServiceSoap12Types.IObservaciones;
        FchProceso: string;
        Events: ServiceSoap12Types.IEvents;
        Errors: ServiceSoap12Types.IErrors;
    }
    interface IComprobanteDummyResult {
        AppServer: string;
        DbServer: string;
        AuthServer: string;
    }
}
export {};
