declare type long = number;
declare type int = number;
declare type dateTime = Date;
export interface IdummyInput {
}
export interface IdummyOutput {
    return: PersonaServiceA13PortTypes.Ireturn;
}
export interface IgetIdPersonaListByDocumentoInput {
    token: string;
    sign: string;
    cuitRepresentada: long;
    documento: string;
}
export interface IgetIdPersonaListByDocumentoOutput {
    idPersonaListReturn: PersonaServiceA13PortTypes.IidPersonaListReturn;
}
export interface IgetPersonaInput {
    token: string;
    sign: string;
    cuitRepresentada: long;
    idPersona: long;
}
export interface IgetPersonaOutput {
    personaReturn: PersonaServiceA13PortTypes.IpersonaReturn;
}
export interface IPersonaServiceA13PortSoap {
    dummy: (input: IdummyInput, cb: (err: any | null, result: IdummyOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    getIdPersonaListByDocumento: (input: IgetIdPersonaListByDocumentoInput, cb: (err: any | null, result: IgetIdPersonaListByDocumentoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    getPersona: (input: IgetPersonaInput, cb: (err: any | null, result: IgetPersonaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
}
export declare namespace PersonaServiceA13PortTypes {
    interface Ireturn {
        appserver: string;
        authserver: string;
        dbserver: string;
    }
    interface Imetadata {
        fechaHora: dateTime;
        servidor: string;
    }
    interface IidPersonaListReturn {
        idPersona: long;
        metadata: PersonaServiceA13PortTypes.Imetadata;
    }
    interface Idomicilio {
        calle: string;
        codigoPostal: string;
        datoAdicional: string;
        descripcionProvincia: string;
        direccion: string;
        estadoDomicilio: string;
        idProvincia: int;
        localidad: string;
        manzana: string;
        numero: int;
        oficinaDptoLocal: string;
        piso: string;
        sector: string;
        tipoDatoAdicional: string;
        tipoDomicilio: string;
        torre: string;
    }
    interface Ipersona {
        apellido: string;
        claveInactivaAsociada: long;
        descripcionActividadPrincipal: string;
        domicilio: PersonaServiceA13PortTypes.Idomicilio[];
        estadoClave: string;
        fechaContratoSocial: dateTime;
        fechaFallecimiento: dateTime;
        fechaNacimiento: dateTime;
        formaJuridica: string;
        idActividadPrincipal: long;
        idPersona: long;
        mesCierre: int;
        nombre: string;
        numeroDocumento: string;
        periodoActividadPrincipal: int;
        razonSocial: string;
        tipoClave: string;
        tipoDocumento: string;
        tipoPersona: string;
    }
    interface IpersonaReturn {
        metadata: PersonaServiceA13PortTypes.Imetadata;
        persona: PersonaServiceA13PortTypes.Ipersona;
    }
}
export {};
