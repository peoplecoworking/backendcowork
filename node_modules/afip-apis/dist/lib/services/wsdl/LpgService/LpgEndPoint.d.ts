declare type LpgCuitType = number;
declare type long = number;
declare type float = number;
declare type decimal = number;
declare type date = Date;
declare type base64Binary = string;
export interface IdummyInput {
}
export interface IdummyOutput {
    return: LpgEndPointTypes.Ireturn;
}
export interface IliquidacionAutorizarInput {
    auth: LpgEndPointTypes.Iauth;
    liquidacion: {
        ptoEmision: long;
        nroOrden: long;
        numeroContrato: number;
        cuitComprador: long;
        nroActComprador: number;
        nroIngBrutoComprador: number;
        codTipoOperacion: string;
        esLiquidacionPropia: "S" | "N";
        esCanje: "P" | "T" | "N";
        codPuerto: long;
        desPuertoLocalidad: string;
        codGrano: long;
        pesoNetoSinCertificado: number;
        codLocalidadProcedenciaSinCertificado: number;
        codProvProcedenciaSinCertificado: number;
        cuitVendedor: long;
        nroIngBrutoVendedor: number;
        actuaCorredor: "S" | "N";
        liquidaCorredor: "S" | "N";
        cuitCorredor: long;
        comisionCorredor: decimal;
        nroIngBrutoCorredor: number;
        fechaPrecioOperacion: date;
        precioRefTn: decimal;
        codGradoRef: string;
        codGradoEnt: string;
        valGradoEnt: decimal;
        factorEnt: decimal;
        precioFleteTn: decimal;
        contProteico: decimal;
        alicIvaOperacion: decimal;
        campaniaPPal: number;
        codLocalidadProcedencia: number;
        codProvProcedencia: number;
        datosAdicionales: string;
        certificados: {
            certificado: Array<{
                tipoCertificadoDeposito: string;
                nroCertificadoDeposito: number;
                pesoNeto: number;
                pesoNetoTotalCertificado: number;
                codLocalidadProcedencia: number;
                codProvProcedencia: number;
                campania: long;
                fechaCierre: date;
            }>;
        };
        opcionales: LpgEndPointTypes.Iopcionales;
    };
    deducciones: {
        deduccion: Array<{
            codigoConcepto: string;
            detalleAclaratorio: string;
            diasAlmacenaje: long;
            precioPKGdiario: decimal;
            comisionGastosAdm: decimal;
            baseCalculo: decimal;
            alicuotaIva: decimal;
        }>;
    };
    retenciones: {
        retencion: LpgEndPointTypes.Iretencion[];
    };
    percepciones: {
        percepcion: Array<{
            descripcion: string;
            importeFinal: decimal;
        }>;
    };
}
export interface IliquidacionAutorizarOutput {
    liqReturn: LpgEndPointTypes.IliqReturn;
}
export interface IprovinciasConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface IprovinciasConsultarOutput {
    provinciasReturn: LpgEndPointTypes.IprovinciasReturn;
}
export interface IlocalidadXProvinciaConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    codProvincia: string;
}
export interface IlocalidadXProvinciaConsultarOutput {
    localidadesReturn: LpgEndPointTypes.IlocalidadesReturn;
}
export interface ItipoOperacionXActividadConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    nroActLiquida: long;
}
export interface ItipoOperacionXActividadConsultarOutput {
    tipoOperacionReturn: LpgEndPointTypes.ItipoOperacionReturn;
}
export interface IpuertoConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface IpuertoConsultarOutput {
    puertoReturn: LpgEndPointTypes.IpuertoReturn;
}
export interface ItipoActividadConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface ItipoActividadConsultarOutput {
    tipoActividadReturn: LpgEndPointTypes.ItipoActividadReturn;
}
export interface ItipoActividadRepresentadoConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface ItipoActividadRepresentadoConsultarOutput {
    tipoActividadReturn: LpgEndPointTypes.ItipoActividadReturn;
}
export interface ItipoCertificadoDepositoConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface ItipoCertificadoDepositoConsultarOutput {
    tipoCertDepReturn: LpgEndPointTypes.ItipoCertDepReturn;
}
export interface ItipoRetencionConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface ItipoRetencionConsultarOutput {
    tipoRetencionReturn: LpgEndPointTypes.ItipoRetencionReturn;
}
export interface ItipoDeduccionConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface ItipoDeduccionConsultarOutput {
    tipoDeduccionReturn: LpgEndPointTypes.ItipoDeduccionReturn;
}
export interface ItipoGranoConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface ItipoGranoConsultarOutput {
    tipoGranoReturn: LpgEndPointTypes.ItipoGranoReturn;
}
export interface IcodigoGradoReferenciaConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface IcodigoGradoReferenciaConsultarOutput {
    gradoRefReturn: LpgEndPointTypes.IgradoRefReturn;
}
export interface IcodigoGradoEntregadoXTipoGranoConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    codGrano: long;
}
export interface IcodigoGradoEntregadoXTipoGranoConsultarOutput {
    gradoEntReturn: LpgEndPointTypes.IgradoEntReturn;
}
export interface IcampaniasConsultarInput {
    auth: LpgEndPointTypes.Iauth;
}
export interface IcampaniasConsultarOutput {
    campaniaReturn: LpgEndPointTypes.IcampaniaReturn;
}
export interface IliquidacionXCoeConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    pdf: "S" | "N";
}
export interface IliquidacionXCoeConsultarOutput {
    liqConsReturn: LpgEndPointTypes.IliqConsReturn;
}
export interface IliquidacionXNroOrdenConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    ptoEmision: long;
    nroOrden: long;
}
export interface IliquidacionXNroOrdenConsultarOutput {
    liqConsReturn: LpgEndPointTypes.IliqConsReturn;
}
export interface IliquidacionUltimoNroOrdenConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    ptoEmision: long;
}
export interface IliquidacionUltimoNroOrdenConsultarOutput {
    liqUltNroOrdenReturn: LpgEndPointTypes.IliqUltNroOrdenReturn;
}
export interface IliquidacionAnularInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
}
export interface IliquidacionAnularOutput {
    anulacionReturn: LpgEndPointTypes.IanulacionReturn;
}
export interface IliquidacionAjustarUnificadoInput {
    auth: LpgEndPointTypes.Iauth;
    ajusteBase: {
        ptoEmision: long;
        nroOrden: long;
        coeAjustado: long;
        certificados: {
            certificado: Array<{
                tipoCertificadoDeposito: string;
                nroCertificadoDeposito: number;
                pesoNeto: number;
                pesoNetoTotalCertificado: number;
                codLocalidadProcedencia: number;
                codProvProcedencia: number;
                campania: long;
                fechaCierre: date;
            }>;
        };
        codLocalidad: long;
        codProv: long;
        fusion: LpgEndPointTypes.Ifusion;
    };
    ajusteCredito: {
        certificados: {
            certificado: Array<{
                coe: long;
                pesoAjustado: number;
            }>;
        };
        diferenciaPesoNeto: number;
        diferenciaPrecioOperacion: decimal;
        codGrado: string;
        valGrado: decimal;
        factor: decimal;
        diferenciaPrecioFleteTn: decimal;
        datosAdicionales: string;
        opcionales: LpgEndPointTypes.Iopcionales;
        conceptoImporteIva0: string;
        importeAjustarIva0: decimal;
        conceptoImporteIva105: string;
        importeAjustarIva105: decimal;
        conceptoImporteIva21: string;
        importeAjustarIva21: decimal;
        deducciones: {
            deduccion: Array<{
                codigoConcepto: string;
                detalleAclaratorio: string;
                diasAlmacenaje: long;
                precioPKGdiario: decimal;
                comisionGastosAdm: decimal;
                baseCalculo: decimal;
                alicuotaIva: decimal;
            }>;
        };
        retenciones: {
            retencion: LpgEndPointTypes.Iretencion[];
        };
    };
    ajusteDebito: {
        certificados: {
            certificado: Array<{
                coe: long;
                pesoAjustado: number;
            }>;
        };
        diferenciaPesoNeto: number;
        diferenciaPrecioOperacion: decimal;
        codGrado: string;
        valGrado: decimal;
        factor: decimal;
        diferenciaPrecioFleteTn: decimal;
        datosAdicionales: string;
        opcionales: LpgEndPointTypes.Iopcionales;
        conceptoImporteIva0: string;
        importeAjustarIva0: decimal;
        conceptoImporteIva105: string;
        importeAjustarIva105: decimal;
        conceptoImporteIva21: string;
        importeAjustarIva21: decimal;
        deducciones: {
            deduccion: Array<{
                codigoConcepto: string;
                detalleAclaratorio: string;
                diasAlmacenaje: long;
                precioPKGdiario: decimal;
                comisionGastosAdm: decimal;
                baseCalculo: decimal;
                alicuotaIva: decimal;
            }>;
        };
        retenciones: {
            retencion: LpgEndPointTypes.Iretencion[];
        };
    };
}
export interface IliquidacionAjustarUnificadoOutput {
    ajusteUnifReturn: LpgEndPointTypes.IajusteUnifReturn;
}
export interface IliquidacionAjustarContratoInput {
    auth: LpgEndPointTypes.Iauth;
    ajusteBase: {
        ptoEmision: long;
        nroOrden: long;
        nroContrato: decimal;
        certificados: {
            certificado: Array<{
                tipoCertificadoDeposito: string;
                nroCertificadoDeposito: number;
                pesoNeto: number;
                pesoNetoTotalCertificado: number;
                codLocalidadProcedencia: number;
                codProvProcedencia: number;
                campania: long;
                fechaCierre: date;
            }>;
        };
        actividad: long;
        codGrano: long;
        cuitVendedor: long;
        cuitCorredor: long;
        cuitComprador: long;
        precioRefTn: decimal;
        codGradoEnt: string;
        valGradoEnt: decimal;
        precioFleteTn: decimal;
        codPuerto: long;
        desPuertoLocalidad: string;
        codLocalidad: long;
        codProv: long;
    };
    ajusteCredito: {
        datosAdicionales: string;
        opcionales: LpgEndPointTypes.Iopcionales;
        conceptoImporteIva0: string;
        importeAjustarIva0: decimal;
        conceptoImporteIva105: string;
        importeAjustarIva105: decimal;
        conceptoImporteIva21: string;
        importeAjustarIva21: decimal;
        deducciones: {
            deduccion: Array<{
                codigoConcepto: string;
                detalleAclaratorio: string;
                diasAlmacenaje: long;
                precioPKGdiario: decimal;
                comisionGastosAdm: decimal;
                baseCalculo: decimal;
                alicuotaIva: decimal;
            }>;
        };
        retenciones: {
            retencion: LpgEndPointTypes.Iretencion[];
        };
    };
    ajusteDebito: {
        datosAdicionales: string;
        opcionales: LpgEndPointTypes.Iopcionales;
        conceptoImporteIva0: string;
        importeAjustarIva0: decimal;
        conceptoImporteIva105: string;
        importeAjustarIva105: decimal;
        conceptoImporteIva21: string;
        importeAjustarIva21: decimal;
        deducciones: {
            deduccion: Array<{
                codigoConcepto: string;
                detalleAclaratorio: string;
                diasAlmacenaje: long;
                precioPKGdiario: decimal;
                comisionGastosAdm: decimal;
                baseCalculo: decimal;
                alicuotaIva: decimal;
            }>;
        };
        retenciones: {
            retencion: LpgEndPointTypes.Iretencion[];
        };
    };
}
export interface IliquidacionAjustarContratoOutput {
    ajusteContratoReturn: {
        ajusteContrato: LpgEndPointTypes.IajusteContrato;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IajusteXCoeConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    pdf: "S" | "N";
}
export interface IajusteXCoeConsultarOutput {
    ajusteConsReturn: LpgEndPointTypes.IajusteConsReturn;
}
export interface IasociarLiquidacionAContratoInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    nroContrato: decimal;
    cuitComprador: long;
    cuitVendedor: long;
    cuitCorredor: long;
    codGrano: long;
}
export interface IasociarLiquidacionAContratoOutput {
    liquidacion: {
        liquidacion: {
            ptoEmision: long;
            nroOrden: long;
            numeroContrato: number;
            cuitComprador: long;
            nroActComprador: number;
            nroIngBrutoComprador: number;
            codTipoOperacion: string;
            esLiquidacionPropia: "S" | "N";
            esCanje: "P" | "T" | "N";
            codPuerto: long;
            desPuertoLocalidad: string;
            codGrano: long;
            pesoNetoSinCertificado: number;
            codLocalidadProcedenciaSinCertificado: number;
            codProvProcedenciaSinCertificado: number;
            cuitVendedor: long;
            nroIngBrutoVendedor: number;
            actuaCorredor: "S" | "N";
            liquidaCorredor: "S" | "N";
            cuitCorredor: long;
            comisionCorredor: decimal;
            nroIngBrutoCorredor: number;
            fechaPrecioOperacion: date;
            precioRefTn: decimal;
            codGradoRef: string;
            codGradoEnt: string;
            valGradoEnt: decimal;
            factorEnt: decimal;
            precioFleteTn: decimal;
            contProteico: decimal;
            alicIvaOperacion: decimal;
            campaniaPPal: number;
            codLocalidadProcedencia: number;
            codProvProcedencia: number;
            datosAdicionales: string;
            certificados: {
                certificado: Array<{
                    tipoCertificadoDeposito: string;
                    nroCertificadoDeposito: number;
                    pesoNeto: number;
                    pesoNetoTotalCertificado: number;
                    codLocalidadProcedencia: number;
                    codProvProcedencia: number;
                    campania: long;
                    fechaCierre: date;
                }>;
            };
            opcionales: LpgEndPointTypes.Iopcionales;
        };
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            codTipoOperacion: string;
            codTipoAjuste: string;
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            totalPesoNeto: long;
            percepciones: {
                percepcion: Array<{
                    descripcion: string;
                    baseCalculo: float;
                    alicuota: float;
                    importeFinal: decimal;
                }>;
            };
            totalPercepcion: decimal;
            deducciones: {
                deduccionReturn: LpgEndPointTypes.IdeduccionReturn[];
            };
            totalDeduccion: decimal;
            retenciones: {
                retencionReturn: LpgEndPointTypes.IretencionReturn[];
            };
            totalRetencion: decimal;
            totalRetencionAfip: decimal;
            totalOtrasRetenciones: decimal;
            totalNetoAPagar: decimal;
            totalIvaRg4310_18: decimal;
            totalPagoSegunCondicion: decimal;
            coe: long;
            coeAjustado: long;
            numeroContrato: number;
            estado: string;
        };
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IliquidacionPorContratoConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    nroContrato: decimal;
    cuitComprador: long;
    cuitVendedor: long;
    cuitCorredor: long;
    codGrano: long;
}
export interface IliquidacionPorContratoConsultarOutput {
    liqPorContratoCons: LpgEndPointTypes.IliqPorContratoCons;
}
export interface IajustePorContratoConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    nroContrato: decimal;
}
export interface IajustePorContratoConsultarOutput {
    ajusteContratoReturn: {
        ajusteUnificado: LpgEndPointTypes.IajusteUnificado;
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IajusteXNroOrdenConsultarInput {
    auth: LpgEndPointTypes.Iauth;
    ptoEmision: long;
    nroOrden: long;
}
export interface IajusteXNroOrdenConsultarOutput {
    ajusteXNroOrdenConsReturn: LpgEndPointTypes.IajusteXNroOrdenConsReturn;
}
export interface IlsgAutorizarInput {
    auth: LpgEndPointTypes.Iauth;
    liqSecundariaBase: LpgEndPointTypes.IliqSecundariaBase;
    facturaPapel: LpgEndPointTypes.IfacturaPapel;
}
export interface IlsgAutorizarOutput {
    oReturn: {
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            fechaLiquidacion: date;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            coe: long;
            totalDeducciones: decimal;
            totalPercepciones: decimal;
        };
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IlsgConsultarXCoeInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    pdf: "S" | "N";
}
export interface IlsgConsultarXCoeOutput {
    oReturn: {
        liquidaciones: LpgEndPointTypes.Iliquidaciones[];
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IlsgConsultarXNroOrdenInput {
    auth: LpgEndPointTypes.Iauth;
    ptoEmision: long;
    nroOrden: long;
}
export interface IlsgConsultarXNroOrdenOutput {
    oReturn: {
        liquidaciones: LpgEndPointTypes.Iliquidaciones[];
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IlsgConsultarUltimoNroOrdenInput {
    auth: LpgEndPointTypes.Iauth;
    ptoEmision: long;
}
export interface IlsgConsultarUltimoNroOrdenOutput {
    liqUltNroOrdenReturn: LpgEndPointTypes.IliqUltNroOrdenReturn;
}
export interface IlsgAnularInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    pdf: "S" | "N";
}
export interface IlsgAnularOutput {
    anulacionReturn: LpgEndPointTypes.IanulacionReturn;
}
export interface IlsgAjustarXCoeInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    ptoEmision: long;
    nroOrden: long;
    codLocalidad: long;
    codProvincia: long;
    ajusteCredito: {
        conceptoIva0: string;
        importeAjustar0: decimal;
        conceptoIva10: string;
        importeAjustar10: decimal;
        conceptoIva21: string;
        importeAjustar21: decimal;
        percepcion: Array<{
            detalleAclaratoria: string;
            baseCalculo: decimal;
            alicuota: decimal;
        }>;
        datosAdicionales: string;
    };
    ajusteDebito: {
        conceptoIva0: string;
        importeAjustar0: decimal;
        conceptoIva10: string;
        importeAjustar10: decimal;
        conceptoIva21: string;
        importeAjustar21: decimal;
        percepcion: Array<{
            detalleAclaratoria: string;
            baseCalculo: decimal;
            alicuota: decimal;
        }>;
        datosAdicionales: string;
    };
    fusion: LpgEndPointTypes.Ifusion;
}
export interface IlsgAjustarXCoeOutput {
    oReturn: {
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
        ptoEmision: long;
        nroOrden: long;
        nroContrato: decimal;
        coeAjustado: long;
        coe: long;
        ajusteCredito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIVA: decimal;
            totalPesoNeto: long;
            importe: LpgEndPointTypes.Iimporte[];
            percepcion: Array<{
                detalleAclaratoria: string;
                baseCalculo: decimal;
                alicuota: decimal;
            }>;
            totalPercepcion: decimal;
            totalNetoAPagar: decimal;
            totalPagoSegunCondicion: decimal;
        };
        ajusteDebito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIVA: decimal;
            totalPesoNeto: long;
            importe: LpgEndPointTypes.Iimporte[];
            percepcion: Array<{
                detalleAclaratoria: string;
                baseCalculo: decimal;
                alicuota: decimal;
            }>;
            totalPercepcion: decimal;
            totalNetoAPagar: decimal;
            totalPagoSegunCondicion: decimal;
        };
        totalesUnificados: {
            subtotalCredDeb: decimal;
            subtotalGeneral: decimal;
            iva105: decimal;
            iva21: decimal;
            totalBasePercepciones: decimal;
            importeNeto: decimal;
            pagoSegunCondicion: decimal;
        };
        estado: string;
    };
}
export interface IlsgAjustarXContratoInput {
    auth: LpgEndPointTypes.Iauth;
    nroContrato: decimal;
    ptoEmision: long;
    nroOrden: long;
    codLocalidad: long;
    codProvincia: long;
    cuitComprador: long;
    cuitVendedor: long;
    cuitCorredor: long;
    codGrano: long;
    ajusteCredito: {
        conceptoIva0: string;
        importeAjustar0: decimal;
        conceptoIva10: string;
        importeAjustar10: decimal;
        conceptoIva21: string;
        importeAjustar21: decimal;
        percepcion: Array<{
            detalleAclaratoria: string;
            baseCalculo: decimal;
            alicuota: decimal;
        }>;
        datosAdicionales: string;
    };
    ajusteDebito: {
        conceptoIva0: string;
        importeAjustar0: decimal;
        conceptoIva10: string;
        importeAjustar10: decimal;
        conceptoIva21: string;
        importeAjustar21: decimal;
        percepcion: Array<{
            detalleAclaratoria: string;
            baseCalculo: decimal;
            alicuota: decimal;
        }>;
        datosAdicionales: string;
    };
}
export interface IlsgAjustarXContratoOutput {
    oReturn: {
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
        ptoEmision: long;
        nroOrden: long;
        nroContrato: decimal;
        coeAjustado: long;
        coe: long;
        ajusteCredito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIVA: decimal;
            totalPesoNeto: long;
            importe: LpgEndPointTypes.Iimporte[];
            percepcion: Array<{
                detalleAclaratoria: string;
                baseCalculo: decimal;
                alicuota: decimal;
            }>;
            totalPercepcion: decimal;
            totalNetoAPagar: decimal;
            totalPagoSegunCondicion: decimal;
        };
        ajusteDebito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIVA: decimal;
            totalPesoNeto: long;
            importe: LpgEndPointTypes.Iimporte[];
            percepcion: Array<{
                detalleAclaratoria: string;
                baseCalculo: decimal;
                alicuota: decimal;
            }>;
            totalPercepcion: decimal;
            totalNetoAPagar: decimal;
            totalPagoSegunCondicion: decimal;
        };
        totalesUnificados: {
            subtotalCredDeb: decimal;
            subtotalGeneral: decimal;
            iva105: decimal;
            iva21: decimal;
            totalBasePercepciones: decimal;
            importeNeto: decimal;
            pagoSegunCondicion: decimal;
        };
        estado: string;
    };
}
export interface IlsgAsociarAContratoInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    nroContrato: decimal;
    cuitComprador: long;
    cuitVendedor: long;
    cuitCorredor: long;
    codGrano: long;
}
export interface IlsgAsociarAContratoOutput {
    oReturn: {
        liquidaciones: LpgEndPointTypes.Iliquidaciones[];
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IlsgConsultarXContratoInput {
    auth: LpgEndPointTypes.Iauth;
    nroContrato: decimal;
    cuitComprador: long;
    cuitVendedor: long;
    cuitCorredor: long;
    codGrano: long;
}
export interface IlsgConsultarXContratoOutput {
    liqPorContratoCons: LpgEndPointTypes.IliqPorContratoCons;
}
export interface IcgAutorizarInput {
    auth: LpgEndPointTypes.Iauth;
    cabecera: LpgEndPointTypes.Icabecera;
    primaria: LpgEndPointTypes.Iprimaria;
    retiroTransferencia: LpgEndPointTypes.IretiroTransferencia;
    preexistente: LpgEndPointTypes.Ipreexistente;
    preexistenteFusion: LpgEndPointTypes.IpreexistenteFusion;
}
export interface IcgAutorizarOutput {
    oReturn: {
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            coe: long;
            estado: "AC" | "PA" | "AN";
            fechaCertificacion: date;
            pesosResumen: LpgEndPointTypes.IpesosResumen;
            serviciosResumen: LpgEndPointTypes.IserviciosResumen;
            planta: LpgEndPointTypes.Iplanta;
        };
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IcgBuscarCtgInput {
    auth: LpgEndPointTypes.Iauth;
    tipoCertificado: "P" | "R" | "T" | "E";
    cuitDepositante: long;
    nroPlanta: long;
    codGrano: long;
    campania: long;
    nroCtg: long;
    tipoCtg: "CTG" | "FC";
    nroCartaPorte: number;
    fechaConfirmacionCtgDes: date;
    fechaConfirmacionCtgHas: date;
}
export interface IcgBuscarCtgOutput {
    oReturn: {
        ctg: Array<{
            campania: long;
            nroPlanta: long;
            nroCtg: long;
            tipoCtg: "CTG" | "FC";
            nroCartaPorte: string;
            kilosConfirmados: decimal;
            fechaConfirmacionCtg: date;
            codGrano: long;
            cuitRemitenteComercial: long;
            cuitLiquida: long;
            cuitCertifica: long;
        }>;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IcgBuscarCertConSaldoDisponibleInput {
    auth: LpgEndPointTypes.Iauth;
    cuitDepositante: long;
    codGrano: long;
    campania: long;
    coe: long;
    fechaEmisionDes: date;
    fechaEmisionHas: date;
}
export interface IcgBuscarCertConSaldoDisponibleOutput {
    oReturn: {
        certificado: Array<{
            coe: long;
            tipoCertificado: "P" | "R" | "T" | "E";
            campania: long;
            cuitDepositante: long;
            cuitDepositario: long;
            nroPlanta: long;
            kilosDisponibles: long;
            codGrano: long;
        }>;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IcgConsultarUltimoNroOrdenInput {
    auth: LpgEndPointTypes.Iauth;
    ptoEmision: long;
}
export interface IcgConsultarUltimoNroOrdenOutput {
    liqUltNroOrdenReturn: LpgEndPointTypes.IliqUltNroOrdenReturn;
}
export interface IcgSolicitarAnulacionInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    pdf: "S" | "N";
}
export interface IcgSolicitarAnulacionOutput {
    oReturn: {
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
        estadoCertificado: "AC" | "PA" | "AN";
        pdf: base64Binary;
    };
}
export interface IcgConfirmarAnulacionInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    pdf: "S" | "N";
}
export interface IcgConfirmarAnulacionOutput {
    oReturn: {
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
        estadoCertificado: "AC" | "PA" | "AN";
        pdf: base64Binary;
    };
}
export interface IcgConsultarXCoeInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    pdf: "S" | "N";
}
export interface IcgConsultarXCoeOutput {
    oReturn: {
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            coe: long;
            estado: "AC" | "PA" | "AN";
            fechaCertificacion: date;
            pesosResumen: LpgEndPointTypes.IpesosResumen;
            serviciosResumen: LpgEndPointTypes.IserviciosResumen;
            planta: LpgEndPointTypes.Iplanta;
        };
        cabecera: LpgEndPointTypes.Icabecera;
        primaria: LpgEndPointTypes.Iprimaria;
        retiroTransferencia: LpgEndPointTypes.IretiroTransferencia;
        preexistente: LpgEndPointTypes.Ipreexistente;
        nroPlanta: long;
        cuitDepositario: long;
        alicuotaIVA: decimal;
        cuitRemitenteComercial: long;
        codLocalidad: long;
        codProvincia: long;
        kilosDisponible: decimal;
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IcgConsultarXNroOrdenInput {
    auth: LpgEndPointTypes.Iauth;
    ptoEmision: long;
    nroOrden: long;
}
export interface IcgConsultarXNroOrdenOutput {
    oReturn: {
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            coe: long;
            estado: "AC" | "PA" | "AN";
            fechaCertificacion: date;
            pesosResumen: LpgEndPointTypes.IpesosResumen;
            serviciosResumen: LpgEndPointTypes.IserviciosResumen;
            planta: LpgEndPointTypes.Iplanta;
        };
        cabecera: LpgEndPointTypes.Icabecera;
        primaria: LpgEndPointTypes.Iprimaria;
        retiroTransferencia: LpgEndPointTypes.IretiroTransferencia;
        preexistente: LpgEndPointTypes.Ipreexistente;
        nroPlanta: long;
        cuitDepositario: long;
        alicuotaIVA: decimal;
        cuitRemitenteComercial: long;
        codLocalidad: long;
        codProvincia: long;
        kilosDisponible: decimal;
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IcgInformarCalidadInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    calidad: LpgEndPointTypes.Icalidad;
}
export interface IcgInformarCalidadOutput {
    oReturn: {
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            coe: long;
            estado: "AC" | "PA" | "AN";
            fechaCertificacion: date;
            pesosResumen: LpgEndPointTypes.IpesosResumen;
            serviciosResumen: LpgEndPointTypes.IserviciosResumen;
            planta: LpgEndPointTypes.Iplanta;
        };
        cabecera: LpgEndPointTypes.Icabecera;
        primaria: LpgEndPointTypes.Iprimaria;
        retiroTransferencia: LpgEndPointTypes.IretiroTransferencia;
        preexistente: LpgEndPointTypes.Ipreexistente;
        nroPlanta: long;
        cuitDepositario: long;
        alicuotaIVA: decimal;
        cuitRemitenteComercial: long;
        codLocalidad: long;
        codProvincia: long;
        kilosDisponible: decimal;
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    };
}
export interface IlpgAutorizarAnticipoInput {
    auth: LpgEndPointTypes.Iauth;
    anticipo: LpgEndPointTypes.Ianticipo;
}
export interface IlpgAutorizarAnticipoOutput {
    liqReturn: LpgEndPointTypes.IliqReturn;
}
export interface IlpgCancelarAnticipoInput {
    auth: LpgEndPointTypes.Iauth;
    coe: long;
    ptoEmision: long;
    nroOrden: long;
    pdf: "S" | "N";
}
export interface IlpgCancelarAnticipoOutput {
    liqConsReturn: LpgEndPointTypes.IliqConsReturn;
}
export interface ILpgEndPointSoap {
    dummy: (input: IdummyInput, cb: (err: any | null, result: IdummyOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionAutorizar: (input: IliquidacionAutorizarInput, cb: (err: any | null, result: IliquidacionAutorizarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    provinciasConsultar: (input: IprovinciasConsultarInput, cb: (err: any | null, result: IprovinciasConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    localidadXProvinciaConsultar: (input: IlocalidadXProvinciaConsultarInput, cb: (err: any | null, result: IlocalidadXProvinciaConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    tipoOperacionXActividadConsultar: (input: ItipoOperacionXActividadConsultarInput, cb: (err: any | null, result: ItipoOperacionXActividadConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    puertoConsultar: (input: IpuertoConsultarInput, cb: (err: any | null, result: IpuertoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    tipoActividadConsultar: (input: ItipoActividadConsultarInput, cb: (err: any | null, result: ItipoActividadConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    tipoActividadRepresentadoConsultar: (input: ItipoActividadRepresentadoConsultarInput, cb: (err: any | null, result: ItipoActividadRepresentadoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    tipoCertificadoDepositoConsultar: (input: ItipoCertificadoDepositoConsultarInput, cb: (err: any | null, result: ItipoCertificadoDepositoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    tipoRetencionConsultar: (input: ItipoRetencionConsultarInput, cb: (err: any | null, result: ItipoRetencionConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    tipoDeduccionConsultar: (input: ItipoDeduccionConsultarInput, cb: (err: any | null, result: ItipoDeduccionConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    tipoGranoConsultar: (input: ItipoGranoConsultarInput, cb: (err: any | null, result: ItipoGranoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    codigoGradoReferenciaConsultar: (input: IcodigoGradoReferenciaConsultarInput, cb: (err: any | null, result: IcodigoGradoReferenciaConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    codigoGradoEntregadoXTipoGranoConsultar: (input: IcodigoGradoEntregadoXTipoGranoConsultarInput, cb: (err: any | null, result: IcodigoGradoEntregadoXTipoGranoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    campaniasConsultar: (input: IcampaniasConsultarInput, cb: (err: any | null, result: IcampaniasConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionXCoeConsultar: (input: IliquidacionXCoeConsultarInput, cb: (err: any | null, result: IliquidacionXCoeConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionXNroOrdenConsultar: (input: IliquidacionXNroOrdenConsultarInput, cb: (err: any | null, result: IliquidacionXNroOrdenConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionUltimoNroOrdenConsultar: (input: IliquidacionUltimoNroOrdenConsultarInput, cb: (err: any | null, result: IliquidacionUltimoNroOrdenConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionAnular: (input: IliquidacionAnularInput, cb: (err: any | null, result: IliquidacionAnularOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionAjustarUnificado: (input: IliquidacionAjustarUnificadoInput, cb: (err: any | null, result: IliquidacionAjustarUnificadoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionAjustarContrato: (input: IliquidacionAjustarContratoInput, cb: (err: any | null, result: IliquidacionAjustarContratoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    ajusteXCoeConsultar: (input: IajusteXCoeConsultarInput, cb: (err: any | null, result: IajusteXCoeConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    asociarLiquidacionAContrato: (input: IasociarLiquidacionAContratoInput, cb: (err: any | null, result: IasociarLiquidacionAContratoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    liquidacionPorContratoConsultar: (input: IliquidacionPorContratoConsultarInput, cb: (err: any | null, result: IliquidacionPorContratoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    ajustePorContratoConsultar: (input: IajustePorContratoConsultarInput, cb: (err: any | null, result: IajustePorContratoConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    ajusteXNroOrdenConsultar: (input: IajusteXNroOrdenConsultarInput, cb: (err: any | null, result: IajusteXNroOrdenConsultarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgAutorizar: (input: IlsgAutorizarInput, cb: (err: any | null, result: IlsgAutorizarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgConsultarXCoe: (input: IlsgConsultarXCoeInput, cb: (err: any | null, result: IlsgConsultarXCoeOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgConsultarXNroOrden: (input: IlsgConsultarXNroOrdenInput, cb: (err: any | null, result: IlsgConsultarXNroOrdenOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgConsultarUltimoNroOrden: (input: IlsgConsultarUltimoNroOrdenInput, cb: (err: any | null, result: IlsgConsultarUltimoNroOrdenOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgAnular: (input: IlsgAnularInput, cb: (err: any | null, result: IlsgAnularOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgAjustarXCoe: (input: IlsgAjustarXCoeInput, cb: (err: any | null, result: IlsgAjustarXCoeOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgAjustarXContrato: (input: IlsgAjustarXContratoInput, cb: (err: any | null, result: IlsgAjustarXContratoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgAsociarAContrato: (input: IlsgAsociarAContratoInput, cb: (err: any | null, result: IlsgAsociarAContratoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lsgConsultarXContrato: (input: IlsgConsultarXContratoInput, cb: (err: any | null, result: IlsgConsultarXContratoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgAutorizar: (input: IcgAutorizarInput, cb: (err: any | null, result: IcgAutorizarOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgBuscarCtg: (input: IcgBuscarCtgInput, cb: (err: any | null, result: IcgBuscarCtgOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgBuscarCertConSaldoDisponible: (input: IcgBuscarCertConSaldoDisponibleInput, cb: (err: any | null, result: IcgBuscarCertConSaldoDisponibleOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgConsultarUltimoNroOrden: (input: IcgConsultarUltimoNroOrdenInput, cb: (err: any | null, result: IcgConsultarUltimoNroOrdenOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgSolicitarAnulacion: (input: IcgSolicitarAnulacionInput, cb: (err: any | null, result: IcgSolicitarAnulacionOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgConfirmarAnulacion: (input: IcgConfirmarAnulacionInput, cb: (err: any | null, result: IcgConfirmarAnulacionOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgConsultarXCoe: (input: IcgConsultarXCoeInput, cb: (err: any | null, result: IcgConsultarXCoeOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgConsultarXNroOrden: (input: IcgConsultarXNroOrdenInput, cb: (err: any | null, result: IcgConsultarXNroOrdenOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    cgInformarCalidad: (input: IcgInformarCalidadInput, cb: (err: any | null, result: IcgInformarCalidadOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lpgAutorizarAnticipo: (input: IlpgAutorizarAnticipoInput, cb: (err: any | null, result: IlpgAutorizarAnticipoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    lpgCancelarAnticipo: (input: IlpgCancelarAnticipoInput, cb: (err: any | null, result: IlpgCancelarAnticipoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
}
export declare namespace LpgEndPointTypes {
    interface Ireturn {
        appserver: string;
        authserver: string;
        dbserver: string;
    }
    interface Iauth {
        token: string;
        sign: string;
        cuit: LpgCuitType;
    }
    interface Iopcional {
        codigo: string;
        descripcion: string;
    }
    interface Iopcionales {
        opcional: LpgEndPointTypes.Iopcional[];
    }
    interface Iretencion {
        codigoConcepto: string;
        detalleAclaratorio: string;
        baseCalculo: decimal;
        alicuota: decimal;
        nroCertificadoRetencion: number;
        fechaCertificadoRetencion: date;
        importeCertificadoRetencion: decimal;
    }
    interface IdeduccionReturn {
        deduccion: {
            codigoConcepto: string;
            detalleAclaratorio: string;
            diasAlmacenaje: long;
            precioPKGdiario: decimal;
            comisionGastosAdm: decimal;
            baseCalculo: decimal;
            alicuotaIva: decimal;
        };
        importeIva: decimal;
        importeDeduccion: decimal;
    }
    interface IretencionReturn {
        retencion: LpgEndPointTypes.Iretencion;
        importeRetencion: decimal;
    }
    interface Ierror {
        codigo: string;
        descripcion: string;
    }
    interface Ierrores {
        error: LpgEndPointTypes.Ierror[];
    }
    interface IerroresFormato {
        error: LpgEndPointTypes.Ierror[];
    }
    interface Ievento {
        codigo: string;
        descripcion: string;
    }
    interface Ieventos {
        evento: LpgEndPointTypes.Ievento[];
    }
    interface IliqReturn {
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            codTipoOperacion: string;
            codTipoAjuste: string;
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            totalPesoNeto: long;
            percepciones: {
                percepcion: Array<{
                    descripcion: string;
                    baseCalculo: float;
                    alicuota: float;
                    importeFinal: decimal;
                }>;
            };
            totalPercepcion: decimal;
            deducciones: {
                deduccionReturn: LpgEndPointTypes.IdeduccionReturn[];
            };
            totalDeduccion: decimal;
            retenciones: {
                retencionReturn: LpgEndPointTypes.IretencionReturn[];
            };
            totalRetencion: decimal;
            totalRetencionAfip: decimal;
            totalOtrasRetenciones: decimal;
            totalNetoAPagar: decimal;
            totalIvaRg4310_18: decimal;
            totalPagoSegunCondicion: decimal;
            coe: long;
            coeAjustado: long;
            numeroContrato: number;
            estado: string;
        };
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IcodigoDescripcion {
        codigo: string;
        descripcion: string;
    }
    interface Iprovincias {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface IprovinciasReturn {
        provincias: LpgEndPointTypes.Iprovincias;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface Ilocalidades {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface IlocalidadesReturn {
        localidades: LpgEndPointTypes.Ilocalidades;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface ItiposOperacion {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface ItipoOperacionReturn {
        tiposOperacion: LpgEndPointTypes.ItiposOperacion;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface Ipuertos {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface IpuertoReturn {
        puertos: LpgEndPointTypes.Ipuertos;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface ItiposActividad {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface ItipoActividadReturn {
        tiposActividad: LpgEndPointTypes.ItiposActividad;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface ItiposCertDep {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface ItipoCertDepReturn {
        tiposCertDep: LpgEndPointTypes.ItiposCertDep;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface ItiposRetencion {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface ItipoRetencionReturn {
        tiposRetencion: LpgEndPointTypes.ItiposRetencion;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface ItiposDeduccion {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface ItipoDeduccionReturn {
        tiposDeduccion: LpgEndPointTypes.ItiposDeduccion;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface Igranos {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface ItipoGranoReturn {
        granos: LpgEndPointTypes.Igranos;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IgradosRef {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface IgradoRefReturn {
        gradosRef: LpgEndPointTypes.IgradosRef;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IgradoEntReturn {
        gradoEnt: {
            gradoEnt: Array<{
                codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion;
                valor: decimal;
            }>;
        };
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface Icampanias {
        codigoDescripcion: LpgEndPointTypes.IcodigoDescripcion[];
    }
    interface IcampaniaReturn {
        campanias: LpgEndPointTypes.Icampanias;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IliqConsReturn {
        liquidacion: {
            ptoEmision: long;
            nroOrden: long;
            numeroContrato: number;
            cuitComprador: long;
            nroActComprador: number;
            nroIngBrutoComprador: number;
            codTipoOperacion: string;
            esLiquidacionPropia: "S" | "N";
            esCanje: "P" | "T" | "N";
            codPuerto: long;
            desPuertoLocalidad: string;
            codGrano: long;
            pesoNetoSinCertificado: number;
            codLocalidadProcedenciaSinCertificado: number;
            codProvProcedenciaSinCertificado: number;
            cuitVendedor: long;
            nroIngBrutoVendedor: number;
            actuaCorredor: "S" | "N";
            liquidaCorredor: "S" | "N";
            cuitCorredor: long;
            comisionCorredor: decimal;
            nroIngBrutoCorredor: number;
            fechaPrecioOperacion: date;
            precioRefTn: decimal;
            codGradoRef: string;
            codGradoEnt: string;
            valGradoEnt: decimal;
            factorEnt: decimal;
            precioFleteTn: decimal;
            contProteico: decimal;
            alicIvaOperacion: decimal;
            campaniaPPal: number;
            codLocalidadProcedencia: number;
            codProvProcedencia: number;
            datosAdicionales: string;
            certificados: {
                certificado: Array<{
                    tipoCertificadoDeposito: string;
                    nroCertificadoDeposito: number;
                    pesoNeto: number;
                    pesoNetoTotalCertificado: number;
                    codLocalidadProcedencia: number;
                    codProvProcedencia: number;
                    campania: long;
                    fechaCierre: date;
                }>;
            };
            opcionales: LpgEndPointTypes.Iopcionales;
        };
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            codTipoOperacion: string;
            codTipoAjuste: string;
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            totalPesoNeto: long;
            percepciones: {
                percepcion: Array<{
                    descripcion: string;
                    baseCalculo: float;
                    alicuota: float;
                    importeFinal: decimal;
                }>;
            };
            totalPercepcion: decimal;
            deducciones: {
                deduccionReturn: LpgEndPointTypes.IdeduccionReturn[];
            };
            totalDeduccion: decimal;
            retenciones: {
                retencionReturn: LpgEndPointTypes.IretencionReturn[];
            };
            totalRetencion: decimal;
            totalRetencionAfip: decimal;
            totalOtrasRetenciones: decimal;
            totalNetoAPagar: decimal;
            totalIvaRg4310_18: decimal;
            totalPagoSegunCondicion: decimal;
            coe: long;
            coeAjustado: long;
            numeroContrato: number;
            estado: string;
        };
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IliqUltNroOrdenReturn {
        nroOrden: long;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IanulacionReturn {
        coe: long;
        resultado: string;
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface Ifusion {
        nroIngBrutos: number;
        nroactividad: long;
    }
    interface IimporteReturn {
        importe: decimal;
        concepto: string;
        alicuota: decimal;
        ivaCalculado: decimal;
    }
    interface Iimportes {
        importeReturn: LpgEndPointTypes.IimporteReturn[];
    }
    interface IajusteUnificado {
        ptoEmision: long;
        nroOrden: long;
        nroContrato: decimal;
        coeAjustado: long;
        codTipoOperacion: string;
        ajusteCredito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            totalPesoNeto: long;
            importes: LpgEndPointTypes.Iimportes;
            deducciones: {
                deduccionReturn: LpgEndPointTypes.IdeduccionReturn[];
            };
            totalDeduccion: decimal;
            retenciones: {
                retencionReturn: LpgEndPointTypes.IretencionReturn[];
            };
            totalRetencion: decimal;
            totalRetencionAfip: decimal;
            totalOtrasRetenciones: decimal;
            totalNetoAPagar: decimal;
            totalIvaRg4310_18: decimal;
            totalPagoSegunCondicion: decimal;
        };
        ajusteDebito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            totalPesoNeto: long;
            importes: LpgEndPointTypes.Iimportes;
            deducciones: {
                deduccionReturn: LpgEndPointTypes.IdeduccionReturn[];
            };
            totalDeduccion: decimal;
            retenciones: {
                retencionReturn: LpgEndPointTypes.IretencionReturn[];
            };
            totalRetencion: decimal;
            totalRetencionAfip: decimal;
            totalOtrasRetenciones: decimal;
            totalNetoAPagar: decimal;
            totalIvaRg4310_18: decimal;
            totalPagoSegunCondicion: decimal;
        };
        totalesUnificados: {
            subTotalDebCred: number;
            totalBaseDeducciones: number;
            subtotalGeneral: decimal;
            ivaDeducciones: number;
            iva105: decimal;
            iva21: decimal;
            retencionesGanancias: number;
            retencionesIVA: number;
            importeOtrasRetenciones: number;
            importeNeto: decimal;
            ivaRG4310_18: number;
            pagoSCondicion: number;
        };
        coe: long;
        estado: string;
    }
    interface IajusteUnifReturn {
        ajusteUnificado: LpgEndPointTypes.IajusteUnificado;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IajusteContrato {
        ptoEmision: long;
        nroOrden: long;
        nroContrato: decimal;
        coeAjustado: long;
        codTipoOperacion: string;
        ajusteCredito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            totalPesoNeto: long;
            importes: LpgEndPointTypes.Iimportes;
            deducciones: {
                deduccionReturn: LpgEndPointTypes.IdeduccionReturn[];
            };
            totalDeduccion: decimal;
            retenciones: {
                retencionReturn: LpgEndPointTypes.IretencionReturn[];
            };
            totalRetencion: decimal;
            totalRetencionAfip: decimal;
            totalOtrasRetenciones: decimal;
            totalNetoAPagar: decimal;
            totalIvaRg4310_18: decimal;
            totalPagoSegunCondicion: decimal;
        };
        ajusteDebito: {
            nroOpComercial: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subTotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            totalPesoNeto: long;
            importes: LpgEndPointTypes.Iimportes;
            deducciones: {
                deduccionReturn: LpgEndPointTypes.IdeduccionReturn[];
            };
            totalDeduccion: decimal;
            retenciones: {
                retencionReturn: LpgEndPointTypes.IretencionReturn[];
            };
            totalRetencion: decimal;
            totalRetencionAfip: decimal;
            totalOtrasRetenciones: decimal;
            totalNetoAPagar: decimal;
            totalIvaRg4310_18: decimal;
            totalPagoSegunCondicion: decimal;
        };
        totalesUnificados: {
            subTotalDebCred: number;
            totalBaseDeducciones: number;
            subtotalGeneral: decimal;
            ivaDeducciones: number;
            iva105: decimal;
            iva21: decimal;
            retencionesGanancias: number;
            retencionesIVA: number;
            importeOtrasRetenciones: number;
            importeNeto: decimal;
            ivaRG4310_18: number;
            pagoSCondicion: number;
        };
        coe: long;
        estado: string;
    }
    interface IajusteConsReturn {
        ajusteUnificado: LpgEndPointTypes.IajusteUnificado;
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IcoeRelacionados {
        coe: long;
    }
    interface IliqPorContratoCons {
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
        coeRelacionados: LpgEndPointTypes.IcoeRelacionados;
    }
    interface IajusteXNroOrdenConsReturn {
        ajusteUnificado: LpgEndPointTypes.IajusteUnificado;
        pdf: base64Binary;
        errores: LpgEndPointTypes.Ierrores;
        erroresFormato: LpgEndPointTypes.IerroresFormato;
        eventos: LpgEndPointTypes.Ieventos;
    }
    interface IliqSecundariaBase {
        ptoEmision: long;
        nroOrden: long;
        numeroContrato: number;
        cuitComprador: long;
        nroIngBrutoComprador: number;
        codPuerto: long;
        desPuertoLocalidad: string;
        codGrano: long;
        cantidadTn: decimal;
        cuitVendedor: long;
        nroActVendedor: number;
        nroIngBrutoVendedor: number;
        actuaCorredor: "S" | "N";
        liquidaCorredor: "S" | "N";
        cuitCorredor: long;
        nroIngBrutoCorredor: number;
        fechaPrecioOperacion: date;
        precioRefTn: decimal;
        precioOperacion: number;
        alicIvaOperacion: decimal;
        campaniaPPal: number;
        codLocalidad: long;
        codProvincia: long;
        deduccion: Array<{
            detalleAclaratoria: string;
            baseCalculo: decimal;
            alicuotaIVA: decimal;
        }>;
        percepcion: Array<{
            detalleAclaratoria: string;
            baseCalculo: decimal;
            alicuota: decimal;
        }>;
        opcionales: LpgEndPointTypes.Iopcionales;
        datosAdicionales: string;
    }
    interface IfacturaPapel {
        nroCAI: number;
        nroFacturaPapel: number;
        fechaFactura: date;
        tipoComprobante: "1" | "34" | "51" | "63" | "39";
    }
    interface Ireq {
        conceptoIva0: string;
        importeAjustar0: decimal;
        conceptoIva10: string;
        importeAjustar10: decimal;
        conceptoIva21: string;
        importeAjustar21: decimal;
        percepcion: Array<{
            detalleAclaratoria: string;
            baseCalculo: decimal;
            alicuota: decimal;
        }>;
        datosAdicionales: string;
    }
    interface Iajuste {
        tipoAjuste: string;
        req: LpgEndPointTypes.Ireq;
        coeAjustado: long;
        codLocalidad: long;
        codProvincia: long;
        totalesUnificados: {
            subtotalCredDeb: decimal;
            subtotalGeneral: decimal;
            iva105: decimal;
            iva21: decimal;
            totalBasePercepciones: decimal;
            importeNeto: decimal;
            pagoSegunCondicion: decimal;
        };
        estado: string;
    }
    interface Iliquidaciones {
        liquidacion: {
            ptoEmision: long;
            nroOrden: long;
            cuitComprador: long;
            nroIngBrutoComprador: number;
            cuitVendedor: long;
            nroActVendedor: number;
            nroIngBrutoVendedor: number;
            actuaCorredor: "S" | "N";
            liquidaCorredor: "S" | "N";
            cuitCorredor: long;
            nroIngBrutoCorredor: number;
            codGrano: long;
            pesoNetoEnTn: decimal;
            campania: long;
            fechaPrecioOperacion: date;
            codPuerto: long;
            descripcionPuertoLocalidad: string;
            otraLocalidad: string;
            precioReferenciaTn: decimal;
            precioOperacionTn: decimal;
            alicuotaIvaOperacion: decimal;
            deduccion: Array<{
                detalleAclaratoria: string;
                baseCalculo: decimal;
                alicuotaIVA: decimal;
            }>;
            percepcion: Array<{
                detalleAclaratoria: string;
                baseCalculo: decimal;
                alicuota: decimal;
            }>;
            totalDeducciones: decimal;
            todalPercepciones: decimal;
            codProvinciaOperacion: number;
            codLocalidadOperacion: number;
            localidadEmision: string;
            nroContrato: decimal;
            facturaPapel: LpgEndPointTypes.IfacturaPapel;
            estado: string;
            datosAdicionales: string;
        };
        autorizacion: {
            ptoEmision: long;
            nroOrden: long;
            fechaLiquidacion: date;
            precioOperacion: decimal;
            subtotal: decimal;
            importeIva: decimal;
            operacionConIva: decimal;
            coe: long;
            coeAjustado: long;
            datosAdicionales: string;
        };
        ajuste: LpgEndPointTypes.Iajuste;
    }
    interface Iimporte {
        importe: decimal;
        concepto: string;
        alicuota: decimal;
        ivaCalculado: decimal;
    }
    interface Icabecera {
        tipoCertificado: "P" | "R" | "T" | "E";
        ptoEmision: long;
        nroOrden: long;
        nroIngBrutoDepositario: number;
        titularGrano: "P" | "T";
        cuitDepositante: long;
        nroIngBrutoDepositante: number;
        codGrano: long;
        campania: long;
        cuitCorredor: long;
        datosAdicionales: string;
    }
    interface IcartaPorteFerroviaria {
        nroCartaPorte: number;
        pesoNetoConfirmadoDefinitivo: decimal;
        porcentajeSecadoHumedad: decimal;
        importeSecado: decimal;
        pesoNetoMermaSecado: decimal;
        tarifaSecado: decimal;
        importeZarandeo: decimal;
        pesoNetoMermaZarandeo: decimal;
        tarifaZarandeo: decimal;
    }
    interface IdetalleMuestraAnalisis {
        descripcionRubro: string;
        tipoRubro: "B" | "R";
        porcentaje: decimal;
        valor: decimal;
    }
    interface Icalidad {
        analisisMuestra: number;
        nroBoletin: number;
        codGrado: string;
        valorGrado: decimal;
        valorContProteico: decimal;
        valorFactor: decimal;
        detalleMuestraAnalisis: LpgEndPointTypes.IdetalleMuestraAnalisis[];
    }
    interface Iprimaria {
        nroActDepositario: number;
        ctg: Array<{
            nroCtg: long;
            nroCartaDePorte: number;
            pesoNetoConfirmadoDefinitivo: decimal;
            porcentajeSecadoHumedad: decimal;
            importeSecado: decimal;
            pesoNetoMermaSecado: decimal;
            tarifaSecado: decimal;
            importeZarandeo: decimal;
            pesoNetoMermaZarandeo: decimal;
            tarifaZarandeo: decimal;
        }>;
        cartaPorteFerroviaria: LpgEndPointTypes.IcartaPorteFerroviaria[];
        descripcionTipoGrano: string;
        montoAlmacenaje: decimal;
        montoAcarreo: decimal;
        montoGastosGenerales: decimal;
        montoZarandeo: decimal;
        porcentajeSecadoDe: decimal;
        porcentajeSecadoA: decimal;
        montoSecado: decimal;
        montoPorCadaPuntoExceso: decimal;
        montoOtros: decimal;
        calidad: LpgEndPointTypes.Icalidad;
        pesoNetoMermaVolatil: decimal;
        serviciosFormaDePago: string;
        serviciosOtros: decimal;
        serviciosConceptosNoGravados: decimal;
        serviciosPercepcionesIVA: decimal;
        serviciosOtrasPercepciones: decimal;
    }
    interface IcertificadoDeposito {
        coeCertificadoDeposito: long;
        pesoNeto: number;
    }
    interface IretiroTransferencia {
        certificadoDeposito: LpgEndPointTypes.IcertificadoDeposito;
        nroActDepositario: number;
        cuitReceptor: number;
        nroCartaPorteAUtilizar: number;
        descripcionCausaJudicial: string;
    }
    interface Ipreexistente {
        nroPlanta: long;
        tipoCertificadoDepositoPreexistente: number;
        nroCertificadoDepositoPreexistente: number;
        cacCertificadoDepositoPreexistente: number;
        fechaEmisionCertificadoDepositoPreexistente: date;
        pesoNeto: decimal;
    }
    interface IpreexistenteFusion {
        nroPlanta: long;
        nroCertificadoDepositoPreexistente: number;
        fechaEmisionCertificadoDepositoPreexistente: date;
        pesoNeto: number;
    }
    interface IpesosResumen {
        pesoBrutoCertificado: decimal;
        pesoMermaVolatil: decimal;
        pesoMermaSecado: decimal;
        pesoMermaZarandeo: decimal;
        pesoNetoCertificado: decimal;
    }
    interface IserviciosResumen {
        servicioSecado: decimal;
        servicioZarandeo: decimal;
        servicioOtros: decimal;
        servicioGastosGenerales: decimal;
        importeIVA: decimal;
        servicioTotal: decimal;
    }
    interface Iplanta {
        nroPlanta: long;
        cuitTitularPlanta: number;
        razonSocialTitularPlanta: string;
    }
    interface Ianticipo {
        liquidacion: {
            ptoEmision: long;
            nroOrden: long;
            cuitComprador: long;
            nroActComprador: number;
            nroIngBrutoComprador: number;
            codTipoOperacion: string;
            nroContrato: decimal;
            codPuerto: long;
            descPuertoLocalidad: string;
            codGrano: long;
            pesoNetoSinCertificado: number;
            cuitVendedor: long;
            nroIngBrutoVendedor: number;
            actuaCorredor: "S" | "N";
            liquidaCorredor: "S" | "N";
            cuitCorredor: long;
            comisionCorredor: decimal;
            nroIngBrutoCorredor: number;
            fechaPrecioOperacion: date;
            precioRefTn: decimal;
            alicIvaOperacion: decimal;
            campaniaPpal: number;
            codLocProcedencia: number;
            codProvProcedencia: number;
            datosAdicionales: string;
            opcionales: LpgEndPointTypes.Iopcionales;
        };
        retenciones: {
            retencion: LpgEndPointTypes.Iretencion[];
        };
        deducciones: {
            deduccion: Array<{
                codigoConcepto: string;
                detalleAclaratorio: string;
                diasAlmacenaje: long;
                precioPKGdiario: decimal;
                comisionGastosAdm: decimal;
                baseCalculo: decimal;
                alicuotaIva: decimal;
            }>;
        };
    }
}
export {};
