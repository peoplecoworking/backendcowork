declare type long = number;
declare type int = number;
declare type dateTime = Date;
export interface IgetPersonaInput {
    token: string;
    sign: string;
    cuitRepresentada: long;
    idPersona: long;
}
export interface IgetPersonaOutput {
    personaReturn: PersonaServiceA5PortTypes.IpersonaReturn;
}
export interface IdummyInput {
}
export interface IdummyOutput {
    return: PersonaServiceA5PortTypes.Ireturn;
}
export interface IPersonaServiceA5PortSoap {
    getPersona: (input: IgetPersonaInput, cb: (err: any | null, result: IgetPersonaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    dummy: (input: IdummyInput, cb: (err: any | null, result: IdummyOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
}
export declare namespace PersonaServiceA5PortTypes {
    interface Idependencia {
        codPostal: string;
        descripcionDependencia: string;
        descripcionProvincia: string;
        direccion: string;
        idDependencia: int;
        idProvincia: int;
        localidad: string;
    }
    interface IdomicilioFiscal {
        codPostal: string;
        datoAdicional: string;
        descripcionProvincia: string;
        direccion: string;
        idProvincia: int;
        localidad: string;
        tipoDatoAdicional: string;
        tipoDomicilio: string;
    }
    interface IdatosGenerales {
        apellido: string;
        dependencia: PersonaServiceA5PortTypes.Idependencia;
        domicilioFiscal: PersonaServiceA5PortTypes.IdomicilioFiscal;
        estadoClave: string;
        fechaContratoSocial: dateTime;
        idPersona: long;
        mesCierre: int;
        nombre: string;
        razonSocial: string;
        tipoClave: string;
        tipoPersona: string;
    }
    interface IactividadMonotributista {
        descripcionActividad: string;
        idActividad: long;
        nomenclador: int;
        orden: int;
        periodo: int;
    }
    interface IcategoriaMonotributo {
        descripcionCategoria: string;
        idCategoria: int;
        idImpuesto: int;
        periodo: int;
    }
    interface IcomponenteDeSociedad {
        apellidoPersonaAsociada: string;
        ffRelacion: dateTime;
        ffVencimiento: dateTime;
        idPersonaAsociada: long;
        nombrePersonaAsociada: string;
        razonSocialPersonaAsociada: string;
        tipoComponente: string;
    }
    interface Iimpuesto {
        descripcionImpuesto: string;
        idImpuesto: int;
        periodo: int;
    }
    interface IdatosMonotributo {
        actividadMonotributista: PersonaServiceA5PortTypes.IactividadMonotributista;
        categoriaMonotributo: PersonaServiceA5PortTypes.IcategoriaMonotributo;
        componenteDeSociedad: PersonaServiceA5PortTypes.IcomponenteDeSociedad[];
        impuesto: PersonaServiceA5PortTypes.Iimpuesto[];
    }
    interface Iactividad {
        descripcionActividad: string;
        idActividad: long;
        nomenclador: int;
        orden: int;
        periodo: int;
    }
    interface IcategoriaAutonomo {
        descripcionCategoria: string;
        idCategoria: int;
        idImpuesto: int;
        periodo: int;
    }
    interface Iregimen {
        descripcionRegimen: string;
        idImpuesto: int;
        idRegimen: int;
        periodo: int;
        tipoRegimen: string;
    }
    interface IdatosRegimenGeneral {
        actividad: PersonaServiceA5PortTypes.Iactividad[];
        categoriaAutonomo: PersonaServiceA5PortTypes.IcategoriaAutonomo;
        impuesto: PersonaServiceA5PortTypes.Iimpuesto[];
        regimen: PersonaServiceA5PortTypes.Iregimen[];
    }
    interface IerrorConstancia {
        apellido: string;
        error: string;
        idPersona: long;
        nombre: string;
    }
    interface IerrorMonotributo {
        error: string;
        mensaje: string;
    }
    interface IerrorRegimenGeneral {
        error: string;
        mensaje: string;
    }
    interface Imetadata {
        fechaHora: dateTime;
        servidor: string;
    }
    interface IpersonaReturn {
        datosGenerales: PersonaServiceA5PortTypes.IdatosGenerales;
        datosMonotributo: PersonaServiceA5PortTypes.IdatosMonotributo;
        datosRegimenGeneral: PersonaServiceA5PortTypes.IdatosRegimenGeneral;
        errorConstancia: PersonaServiceA5PortTypes.IerrorConstancia;
        errorMonotributo: PersonaServiceA5PortTypes.IerrorMonotributo;
        errorRegimenGeneral: PersonaServiceA5PortTypes.IerrorRegimenGeneral;
        metadata: PersonaServiceA5PortTypes.Imetadata;
    }
    interface Ireturn {
        appserver: string;
        authserver: string;
        dbserver: string;
    }
}
export {};
