declare type short = number;
declare type long = number;
declare type int = number;
declare type decimal = number;
declare type date = Date;
declare type base64Binary = string;
declare type CuitSimpleType = number;
export interface IdummyInput {
}
export interface IdummyOutput {
    dummyReturn: RemHarinaServiceSOAPTypes.IdummyReturn;
}
export interface IgenerarRemitoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    idReqCliente: number;
    remito: RemHarinaServiceSOAPTypes.Iremito;
}
export interface IgenerarRemitoOutput {
    generarRemitoReturn: RemHarinaServiceSOAPTypes.IgenerarRemitoReturn;
}
export interface IautorizarRemitoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    estado: "A" | "D";
}
export interface IautorizarRemitoOutput {
    operacionReturn: RemHarinaServiceSOAPTypes.IoperacionReturn;
}
export interface IanularRemitoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    observacion: string;
}
export interface IanularRemitoOutput {
    operacionReturn: RemHarinaServiceSOAPTypes.IoperacionReturn;
}
export interface IemitirRemitoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    viaje: RemHarinaServiceSOAPTypes.Iviaje;
}
export interface IemitirRemitoOutput {
    emitirRemitoReturn: RemHarinaServiceSOAPTypes.IemitirRemitoReturn;
}
export interface IregistrarRecepcionInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    fecha: date;
    estado: "ACE" | "ACP" | "NAC" | "PEN";
    arrayRecepcionMercaderia: RemHarinaServiceSOAPTypes.IarrayRecepcionMercaderia;
}
export interface IregistrarRecepcionOutput {
    operacionReturn: RemHarinaServiceSOAPTypes.IoperacionReturn;
}
export interface ImodificarViajeInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    viaje: RemHarinaServiceSOAPTypes.Iviaje;
}
export interface ImodificarViajeOutput {
    operacionReturn: RemHarinaServiceSOAPTypes.IoperacionReturn;
}
export interface IinformarContingenciaInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    contingencia: RemHarinaServiceSOAPTypes.Icontingencia;
}
export interface IinformarContingenciaOutput {
    operacionReturn: RemHarinaServiceSOAPTypes.IoperacionReturn;
}
export interface IconsultarUltimoRemitoEmitidoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    tipoComprobante: short;
    puntoEmision: number;
}
export interface IconsultarUltimoRemitoEmitidoOutput {
    consultarUltimoRemitoReturn: RemHarinaServiceSOAPTypes.IconsultarUltimoRemitoReturn;
}
export interface IconsultarRemitoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    idReqCliente: number;
    tipoComprobante: short;
    puntoEmision: number;
    nroComprobante: number;
    cuitEmisor: CuitSimpleType;
}
export interface IconsultarRemitoOutput {
    consultarRemitoReturn: RemHarinaServiceSOAPTypes.IconsultarRemitoReturn;
}
export interface IconsultarTiposComprobanteInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarTiposComprobanteOutput {
    codigoDescripcionReturn: {
        arrayCodigoDescripcion: {
            codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
        };
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    };
}
export interface IconsultarTiposEstadoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarTiposEstadoOutput {
    codigoDescripcionReturn: {
        arrayCodigoDescripcion: {
            codigoDescripcionString: RemHarinaServiceSOAPTypes.IcodigoDescripcionString[];
        };
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    };
}
export interface IconsultarTiposContingenciaInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarTiposContingenciaOutput {
    codigoDescripcionReturn: {
        arrayCodigoDescripcion: {
            codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
        };
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    };
}
export interface IconsultarCodigosDomicilioInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    cuitTitularDomicilio: CuitSimpleType;
}
export interface IconsultarCodigosDomicilioOutput {
    consultarCodigosDomicilioReturn: RemHarinaServiceSOAPTypes.IconsultarCodigosDomicilioReturn;
}
export interface IconsultarPuntosEmisionInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarPuntosEmisionOutput {
    consultarPuntosEmisionReturn: RemHarinaServiceSOAPTypes.IconsultarPuntosEmisionReturn;
}
export interface IconsultarTiposMercaderiaInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarTiposMercaderiaOutput {
    codigoDescripcionReturn: {
        arrayCodigoDescripcion: {
            codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
        };
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    };
}
export interface IconsultarUnidadesVentaInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarUnidadesVentaOutput {
    codigoDescripcionReturn: {
        arrayCodigoDescripcion: {
            codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
        };
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    };
}
export interface IconsultarTiposEmbalajeInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarTiposEmbalajeOutput {
    codigoDescripcionReturn: {
        arrayCodigoDescripcion: {
            codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
        };
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    };
}
export interface IconsultarRemitosEmisorInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    rangoFecha: RemHarinaServiceSOAPTypes.IrangoFecha;
    ptoEmision: number;
    tipoComprobante: short;
    estado: string;
    nroPagina: short;
}
export interface IconsultarRemitosEmisorOutput {
    consultarRemitosReturn: RemHarinaServiceSOAPTypes.IconsultarRemitosReturn;
}
export interface IconsultarRemitosAutorizadorInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    rolAutorizador: "TIT" | "DEP";
    estadoAutorizacion: "PE" | "AU" | "RE";
    rangoFecha: RemHarinaServiceSOAPTypes.IrangoFecha;
    cuitEmisor: CuitSimpleType;
    nroPagina: short;
}
export interface IconsultarRemitosAutorizadorOutput {
    consultarRemitosReturn: RemHarinaServiceSOAPTypes.IconsultarRemitosReturn;
}
export interface IconsultarRemitosReceptorInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    estadoRecepcion: "ACE" | "ACP" | "NAC" | "PEN";
    cuitEmisor: CuitSimpleType;
    rangoFecha: RemHarinaServiceSOAPTypes.IrangoFecha;
    nroPagina: short;
}
export interface IconsultarRemitosReceptorOutput {
    consultarRemitosReturn: RemHarinaServiceSOAPTypes.IconsultarRemitosReturn;
}
export interface IconsultarEstadosRemitoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    codRemito: long;
    idReqCliente: number;
    tipoComprobante: short;
    puntoEmision: number;
    nroComprobante: number;
    cuitEmisor: CuitSimpleType;
}
export interface IconsultarEstadosRemitoOutput {
    estadosRemitoReturn: RemHarinaServiceSOAPTypes.IestadosRemitoReturn;
}
export interface IregistrarReingresoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    idReqCliente: number;
    codRemito: long;
}
export interface IregistrarReingresoOutput {
    operacionReturn: RemHarinaServiceSOAPTypes.IoperacionReturn;
}
export interface IregistrarRedestinoInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
    idReqCliente: number;
    codRemito: long;
    cuitReceptor: CuitSimpleType;
    tipoDomReceptor: "1" | "3";
    codDomReceptor: int;
    arrayRedestinoMercaderia: RemHarinaServiceSOAPTypes.IarrayRedestinoMercaderia;
}
export interface IregistrarRedestinoOutput {
    registrarRedestinoReturn: RemHarinaServiceSOAPTypes.IregistrarRedestinoReturn;
}
export interface IconsultarPaisesInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarPaisesOutput {
    consultarCodigosPaisReturn: RemHarinaServiceSOAPTypes.IconsultarCodigosPaisReturn;
}
export interface IconsultarAduanasInput {
    token: string;
    sign: string;
    cuitRepresentada: CuitSimpleType;
}
export interface IconsultarAduanasOutput {
    codigoDescripcionReturn: {
        arrayCodigoDescripcion: {
            codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
        };
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    };
}
export interface IconsultarProvinciasInput {
    authRequest: RemHarinaServiceSOAPTypes.IauthRequest;
}
export interface IconsultarProvinciasOutput {
    consultarProvinciasReturn: RemHarinaServiceSOAPTypes.IconsultarProvinciasReturn;
}
export interface IRemHarinaServiceSOAPSoap {
    dummy: (input: IdummyInput, cb: (err: any | null, result: IdummyOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    generarRemito: (input: IgenerarRemitoInput, cb: (err: any | null, result: IgenerarRemitoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    autorizarRemito: (input: IautorizarRemitoInput, cb: (err: any | null, result: IautorizarRemitoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    anularRemito: (input: IanularRemitoInput, cb: (err: any | null, result: IanularRemitoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    emitirRemito: (input: IemitirRemitoInput, cb: (err: any | null, result: IemitirRemitoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    registrarRecepcion: (input: IregistrarRecepcionInput, cb: (err: any | null, result: IregistrarRecepcionOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    modificarViaje: (input: ImodificarViajeInput, cb: (err: any | null, result: ImodificarViajeOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    informarContingencia: (input: IinformarContingenciaInput, cb: (err: any | null, result: IinformarContingenciaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarUltimoRemitoEmitido: (input: IconsultarUltimoRemitoEmitidoInput, cb: (err: any | null, result: IconsultarUltimoRemitoEmitidoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarRemito: (input: IconsultarRemitoInput, cb: (err: any | null, result: IconsultarRemitoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarTiposComprobante: (input: IconsultarTiposComprobanteInput, cb: (err: any | null, result: IconsultarTiposComprobanteOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarTiposEstado: (input: IconsultarTiposEstadoInput, cb: (err: any | null, result: IconsultarTiposEstadoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarTiposContingencia: (input: IconsultarTiposContingenciaInput, cb: (err: any | null, result: IconsultarTiposContingenciaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarCodigosDomicilio: (input: IconsultarCodigosDomicilioInput, cb: (err: any | null, result: IconsultarCodigosDomicilioOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarPuntosEmision: (input: IconsultarPuntosEmisionInput, cb: (err: any | null, result: IconsultarPuntosEmisionOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarTiposMercaderia: (input: IconsultarTiposMercaderiaInput, cb: (err: any | null, result: IconsultarTiposMercaderiaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarUnidadesVenta: (input: IconsultarUnidadesVentaInput, cb: (err: any | null, result: IconsultarUnidadesVentaOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarTiposEmbalaje: (input: IconsultarTiposEmbalajeInput, cb: (err: any | null, result: IconsultarTiposEmbalajeOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarRemitosEmisor: (input: IconsultarRemitosEmisorInput, cb: (err: any | null, result: IconsultarRemitosEmisorOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarRemitosAutorizador: (input: IconsultarRemitosAutorizadorInput, cb: (err: any | null, result: IconsultarRemitosAutorizadorOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarRemitosReceptor: (input: IconsultarRemitosReceptorInput, cb: (err: any | null, result: IconsultarRemitosReceptorOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarEstadosRemito: (input: IconsultarEstadosRemitoInput, cb: (err: any | null, result: IconsultarEstadosRemitoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    registrarReingreso: (input: IregistrarReingresoInput, cb: (err: any | null, result: IregistrarReingresoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    registrarRedestino: (input: IregistrarRedestinoInput, cb: (err: any | null, result: IregistrarRedestinoOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarPaises: (input: IconsultarPaisesInput, cb: (err: any | null, result: IconsultarPaisesOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarAduanas: (input: IconsultarAduanasInput, cb: (err: any | null, result: IconsultarAduanasOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
    consultarProvincias: (input: IconsultarProvinciasInput, cb: (err: any | null, result: IconsultarProvinciasOutput, raw: string, soapHeader: {
        [k: string]: any;
    }) => any, options?: any, extraHeaders?: any) => void;
}
export declare namespace RemHarinaServiceSOAPTypes {
    interface IdummyReturn {
        appserver: string;
        authserver: string;
        dbserver: string;
    }
    interface IauthRequest {
        token: string;
        sign: string;
        cuitRepresentada: CuitSimpleType;
    }
    interface Idepositario {
        tipoDepositario: "E" | "I" | "D";
        cuitDepositario?: CuitSimpleType;
        rucaEstDepositario?: number;
        tipoDomOrigen?: "1" | "3";
        codDomOrigen?: int;
    }
    interface IreceptorNacional {
        cuitReceptor: CuitSimpleType;
        tipoDomReceptor: int;
        codDomReceptor: int;
    }
    interface IreceptorNacionalNoCateg {
        documento: long;
        razonSocial: string;
        domDestinoCalle: string;
        domDestinoNumero: string;
        domDestinoCp: string;
        domDestinoLoc: string;
        domDestinoIdPcia: int;
    }
    interface IreceptorExtranjero {
        denominacionReceptor: string;
        domicilioReceptor: string;
        cuitDespachante: CuitSimpleType;
        codigoAduana: string;
    }
    interface Ireceptor {
        cuitPaisReceptor: CuitSimpleType;
        receptorNacional?: RemHarinaServiceSOAPTypes.IreceptorNacional;
        receptorNacionalNoCateg?: RemHarinaServiceSOAPTypes.IreceptorNacionalNoCateg;
        receptorExtranjero?: RemHarinaServiceSOAPTypes.IreceptorExtranjero;
    }
    interface ItransporteNacional {
        cuitTransportista: CuitSimpleType;
        cuitConductor: CuitSimpleType;
    }
    interface ItransporteExtranjero {
        denomTransportista: string;
        cedulaConductor: string;
        nombreConductor: string;
        apellidoConductor: string;
    }
    interface Itransportista {
        codPaisTransportista: int;
        transporteNacional?: RemHarinaServiceSOAPTypes.ItransporteNacional;
        transporteExtranjero?: RemHarinaServiceSOAPTypes.ItransporteExtranjero;
    }
    interface IarrayIdLocomotora {
        identificador: string;
    }
    interface IarrayIdVagon {
        identificador: string;
    }
    interface Iferroviario {
        arrayIdLocomotora: RemHarinaServiceSOAPTypes.IarrayIdLocomotora;
        arrayIdVagon: RemHarinaServiceSOAPTypes.IarrayIdVagon;
    }
    interface IarrayDominioAcoplado {
        identificador: string;
    }
    interface Iautomotor {
        dominioVehiculo: string;
        arrayDominioAcoplado?: RemHarinaServiceSOAPTypes.IarrayDominioAcoplado;
    }
    interface Ivehiculo {
        ferroviario?: RemHarinaServiceSOAPTypes.Iferroviario;
        automotor?: RemHarinaServiceSOAPTypes.Iautomotor;
    }
    interface Iviaje {
        transportista: RemHarinaServiceSOAPTypes.Itransportista;
        fechaInicioViaje: date;
        distanciaKm: decimal;
        vehiculo: RemHarinaServiceSOAPTypes.Ivehiculo;
    }
    interface Imercaderia {
        orden: number;
        codTipo: short;
        codComer: string;
        descComer: string;
        codTipoEmb: short;
        cantidadEmb: int;
        codTipoUnidad: short;
        cantidadUnidad: number;
        pesoNetoKg?: number;
        pesoNetoRecKg?: number;
        pesoNetoPerKg?: number;
        pesoNetoRedKg?: number;
        pesoNetoReiKg?: number;
    }
    interface IarrayMercaderia {
        mercaderia: RemHarinaServiceSOAPTypes.Imercaderia[];
    }
    interface Iremito {
        tipoMovimiento: "ENV" | "CAN" | "RET" | "RED";
        tipoCmp: short;
        esEntregaMostrador?: "S" | "N";
        tipoEmisor: "U" | "I";
        rucaEstEmisor: number;
        puntoEmision: number;
        cuitTitular: CuitSimpleType;
        depositario: RemHarinaServiceSOAPTypes.Idepositario;
        receptor: RemHarinaServiceSOAPTypes.Ireceptor;
        viaje?: RemHarinaServiceSOAPTypes.Iviaje;
        arrayMercaderia: RemHarinaServiceSOAPTypes.IarrayMercaderia;
        codRemRedestinar?: long;
        reingresado?: string;
        importeCot?: number;
    }
    interface IdatosAutAFIP {
        nroRemito: number;
        codAutorizacion: long;
        fechaEmision: date;
        fechaVencimiento: date;
    }
    interface Ileyenda {
        codLeyenda: int;
        descripcion: string;
        grupo: "EMI" | "TIT" | "DEP" | "DES" | "OPE" | "TRA";
    }
    interface IarrayLeyendas {
        leyenda: RemHarinaServiceSOAPTypes.Ileyenda[];
    }
    interface IrecepcionMercaderia {
        orden: number;
        pesoNetoKG: number;
    }
    interface IarrayMercaderiaPerdida {
        recepcionMercaderia: RemHarinaServiceSOAPTypes.IrecepcionMercaderia[];
    }
    interface Icontingencia {
        codTipoContingencia: short;
        fecha: date;
        arrayMercaderiaPerdida: RemHarinaServiceSOAPTypes.IarrayMercaderiaPerdida;
        observacion: string;
    }
    interface IarrayContingencias {
        contingencia: RemHarinaServiceSOAPTypes.Icontingencia[];
    }
    interface IremitoOutput {
        codRemito: long;
        idReqCliente: number;
        cuitEmisor: CuitSimpleType;
        remito: RemHarinaServiceSOAPTypes.Iremito;
        datosAutAFIP: RemHarinaServiceSOAPTypes.IdatosAutAFIP;
        estadoRemito: string;
        qr: base64Binary;
        arrayLeyendas: RemHarinaServiceSOAPTypes.IarrayLeyendas;
        arrayContingencias: RemHarinaServiceSOAPTypes.IarrayContingencias;
        fechaAut: date;
        fechaRec: date;
    }
    interface Ievento {
        codigo: short;
        descripcion: string;
    }
    interface IcodigoDescripcion {
        codigo: short;
        descripcion: string;
    }
    interface IarrayObservaciones {
        codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
    }
    interface IarrayErrores {
        codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
    }
    interface IcodigoDescripcionString {
        codigo: string;
        descripcion: string;
    }
    interface IarrayErroresFormato {
        codigoDescripcionString: RemHarinaServiceSOAPTypes.IcodigoDescripcionString[];
    }
    interface IgenerarRemitoReturn {
        remitoOutput: RemHarinaServiceSOAPTypes.IremitoOutput;
        resultado: "A" | "O" | "R";
        evento: RemHarinaServiceSOAPTypes.Ievento;
        arrayObservaciones: RemHarinaServiceSOAPTypes.IarrayObservaciones;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IoperacionReturn {
        codRemito: long;
        resultado: "A" | "O" | "R";
        evento: RemHarinaServiceSOAPTypes.Ievento;
        arrayObservaciones: RemHarinaServiceSOAPTypes.IarrayObservaciones;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IemitirRemitoReturn {
        remitoOutput: RemHarinaServiceSOAPTypes.IremitoOutput;
        resultado: "A" | "O" | "R";
        evento: RemHarinaServiceSOAPTypes.Ievento;
        arrayObservaciones: RemHarinaServiceSOAPTypes.IarrayObservaciones;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IarrayRecepcionMercaderia {
        recepcionMercaderia: RemHarinaServiceSOAPTypes.IrecepcionMercaderia[];
    }
    interface IconsultarUltimoRemitoReturn {
        remitoOutput: RemHarinaServiceSOAPTypes.IremitoOutput;
        evento: RemHarinaServiceSOAPTypes.Ievento;
        arrayObservaciones: RemHarinaServiceSOAPTypes.IarrayObservaciones;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IconsultarRemitoReturn {
        remitoOutput: RemHarinaServiceSOAPTypes.IremitoOutput;
        evento: RemHarinaServiceSOAPTypes.Ievento;
        arrayObservaciones: RemHarinaServiceSOAPTypes.IarrayObservaciones;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IarrayDomicilios {
        codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
    }
    interface IconsultarCodigosDomicilioReturn {
        arrayDomicilios: RemHarinaServiceSOAPTypes.IarrayDomicilios;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IarrayPuntosEmision {
        codigoDescripcion: RemHarinaServiceSOAPTypes.IcodigoDescripcion[];
    }
    interface IconsultarPuntosEmisionReturn {
        arrayPuntosEmision: RemHarinaServiceSOAPTypes.IarrayPuntosEmision;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IrangoFecha {
        fechaDesde: date;
        fechaHasta: date;
    }
    interface IinfoRemito {
        cuitEmisor: CuitSimpleType;
        codRemito: long;
        puntoEmision: number;
        tipoCmp: short;
        nroRemito: number;
        idReqCliente: number;
        estadoActual: string;
        fechaOper: date;
    }
    interface IarrayRemitos {
        infoRemito: RemHarinaServiceSOAPTypes.IinfoRemito[];
    }
    interface IconsultarRemitosReturn {
        arrayRemitos: RemHarinaServiceSOAPTypes.IarrayRemitos;
        nroPagina: short;
        hayMas: "S" | "N";
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface Iestados {
        estado: string;
        fecha: date;
        cuitUsuario: CuitSimpleType;
        cuitDesc: string;
    }
    interface IarrayEstados {
        estados: RemHarinaServiceSOAPTypes.Iestados[];
    }
    interface IestadosRemitoReturn {
        codRemito: long;
        arrayEstados: RemHarinaServiceSOAPTypes.IarrayEstados;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IarrayRedestinoMercaderia {
        recepcionMercaderia: RemHarinaServiceSOAPTypes.IrecepcionMercaderia[];
    }
    interface IregistrarRedestinoReturn {
        remitoOutput: RemHarinaServiceSOAPTypes.IremitoOutput;
        resultado: "A" | "O" | "R";
        evento: RemHarinaServiceSOAPTypes.Ievento;
        arrayObservaciones: RemHarinaServiceSOAPTypes.IarrayObservaciones;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface Ipais {
        codigo: long;
        cuit: CuitSimpleType;
        nombre: string;
        tipoSujeto: string;
    }
    interface IarrayPaises {
        pais: RemHarinaServiceSOAPTypes.Ipais[];
    }
    interface IconsultarCodigosPaisReturn {
        arrayPaises: RemHarinaServiceSOAPTypes.IarrayPaises;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
    }
    interface IarrayProvincias {
        codigoDescripcionString: RemHarinaServiceSOAPTypes.IcodigoDescripcionString[];
    }
    interface IconsultarProvinciasReturn {
        arrayProvincias: RemHarinaServiceSOAPTypes.IarrayProvincias;
        arrayErroresFormato: RemHarinaServiceSOAPTypes.IarrayErroresFormato;
        arrayErrores: RemHarinaServiceSOAPTypes.IarrayErrores;
    }
}
export {};
