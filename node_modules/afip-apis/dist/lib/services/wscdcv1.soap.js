"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wscdcv1 = void 0;
const xml2js = __importStar(require("xml2js"));
const soap12_1 = require("./soap12");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("afip-apis:wscdcv1");
class Wscdcv1 extends soap12_1.SoapService {
    static get serviceId() {
        return "wscdc";
    }
    static get produccionWSDL() {
        return "https://servicios1.afip.gov.ar/WSCDC/service.asmx?WSDL";
    }
    static get testWSDL() {
        return "https://wswhomo.afip.gov.ar/WSCDC/service.asmx?WSDL";
    }
    ComprobantesModalidadConsultar(input, options, extraHeaders) {
        extraHeaders = extraHeaders || {};
        extraHeaders.SOAPAction = "http://servicios1.afip.gob.ar/wscdc/ComprobantesModalidadConsultar";
        const builder = new xml2js.Builder({ headless: true });
        const envelope = {
            "soap:Envelope": {
                $: {
                    "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                },
                "soap:Header": undefined,
                "soap:Body": {
                    $: { xmlns: "http://servicios1.afip.gob.ar/wscdc/" },
                    ComprobantesModalidadConsultar: input
                }
            }
        };
        const soapEnvelope = builder.buildObject(envelope);
        debug("soapEnvelope: %s", soapEnvelope);
        return new Promise((resolve, reject) => {
            return this.invoke(soapEnvelope, undefined, extraHeaders)
                .then(r => {
                return resolve(r.ComprobantesModalidadConsultarResponse);
            })
                .catch(err => {
                return reject(err);
            });
        });
    }
    ComprobantesTipoConsultar(input, options, extraHeaders) {
        extraHeaders = extraHeaders || {};
        extraHeaders.SOAPAction = "http://servicios1.afip.gob.ar/wscdc/ComprobantesTipoConsultar";
        const builder = new xml2js.Builder({ headless: true });
        const envelope = {
            "soap:Envelope": {
                $: {
                    "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                },
                "soap:Header": undefined,
                "soap:Body": {
                    $: { xmlns: "http://servicios1.afip.gob.ar/wscdc/" },
                    ComprobantesTipoConsultar: input
                }
            }
        };
        const soapEnvelope = builder.buildObject(envelope);
        debug("soapEnvelope: %s", soapEnvelope);
        return new Promise((resolve, reject) => {
            return this.invoke(soapEnvelope, undefined, extraHeaders)
                .then(r => {
                return resolve(r.ComprobantesTipoConsultarResponse);
            })
                .catch(err => {
                return reject(err);
            });
        });
    }
    DocumentosTipoConsultar(input, options, extraHeaders) {
        extraHeaders = extraHeaders || {};
        extraHeaders.SOAPAction = "http://servicios1.afip.gob.ar/wscdc/DocumentosTipoConsultar";
        const builder = new xml2js.Builder({ headless: true });
        const envelope = {
            "soap:Envelope": {
                $: {
                    "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                },
                "soap:Header": undefined,
                "soap:Body": {
                    $: { xmlns: "http://servicios1.afip.gob.ar/wscdc/" },
                    DocumentosTipoConsultar: input
                }
            }
        };
        const soapEnvelope = builder.buildObject(envelope);
        debug("soapEnvelope: %s", soapEnvelope);
        return new Promise((resolve, reject) => {
            return this.invoke(soapEnvelope, undefined, extraHeaders)
                .then(r => {
                return resolve(r.DocumentosTipoConsultarResponse);
            })
                .catch(err => {
                return reject(err);
            });
        });
    }
    OpcionalesTipoConsultar(input, options, extraHeaders) {
        extraHeaders = extraHeaders || {};
        extraHeaders.SOAPAction = "http://servicios1.afip.gob.ar/wscdc/OpcionalesTipoConsultar";
        const builder = new xml2js.Builder({ headless: true });
        const envelope = {
            "soap:Envelope": {
                $: {
                    "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                },
                "soap:Header": undefined,
                "soap:Body": {
                    $: { xmlns: "http://servicios1.afip.gob.ar/wscdc/" },
                    OpcionalesTipoConsultar: input
                }
            }
        };
        const soapEnvelope = builder.buildObject(envelope);
        debug("soapEnvelope: %s", soapEnvelope);
        return new Promise((resolve, reject) => {
            return this.invoke(soapEnvelope, undefined, extraHeaders)
                .then(r => {
                return resolve(r.OpcionalesTipoConsultarResponse);
            })
                .catch(err => {
                return reject(err);
            });
        });
    }
    ComprobanteConstatar(input, options, extraHeaders) {
        extraHeaders = extraHeaders || {};
        extraHeaders.SOAPAction = "http://servicios1.afip.gob.ar/wscdc/ComprobanteConstatar";
        const builder = new xml2js.Builder({ headless: true });
        const envelope = {
            "soap:Envelope": {
                $: {
                    "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                },
                "soap:Header": undefined,
                "soap:Body": {
                    $: { xmlns: "http://servicios1.afip.gob.ar/wscdc/" },
                    ComprobanteConstatar: input
                }
            }
        };
        const soapEnvelope = builder.buildObject(envelope);
        debug("soapEnvelope: %s", soapEnvelope);
        return new Promise((resolve, reject) => {
            return this.invoke(soapEnvelope, undefined, extraHeaders)
                .then(r => {
                return resolve(r.ComprobanteConstatarResponse);
            })
                .catch(err => {
                return reject(err);
            });
        });
    }
    ComprobanteDummy(input, options, extraHeaders) {
        extraHeaders = extraHeaders || {};
        extraHeaders.SOAPAction = "http://servicios1.afip.gob.ar/wscdc/ComprobanteDummy";
        const builder = new xml2js.Builder({ headless: true });
        const envelope = {
            "soap:Envelope": {
                $: {
                    "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                },
                "soap:Header": undefined,
                "soap:Body": {
                    $: { xmlns: "http://servicios1.afip.gob.ar/wscdc/" },
                    ComprobanteDummy: input || {}
                }
            }
        };
        const soapEnvelope = builder.buildObject(envelope);
        debug("soapEnvelope: %s", soapEnvelope);
        return new Promise((resolve, reject) => {
            return this.invoke(soapEnvelope, undefined, extraHeaders)
                .then(r => {
                return resolve(r.ComprobanteDummyResponse);
            })
                .catch(err => {
                return reject(err);
            });
        });
    }
}
exports.Wscdcv1 = Wscdcv1;
