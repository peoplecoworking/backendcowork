"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wsfev1 = void 0;
const xml2js = __importStar(require("xml2js"));
const error_server_class_1 = require("../shared/error.server.class");
const soap12_1 = require("./soap12");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("afip-apis:wsfev1");
class Wsfev1 extends soap12_1.SoapService {
    constructor() {
        super(...arguments);
        this.FECAEAConsultar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FECAEAConsultar";
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECAEAConsultar: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FECAEAConsultarResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECAEARegInformativo = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FECAEARegInformativo";
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECAEARegInformativo: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("FECAEARegInformativo;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FECAEARegInformativoResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECAEASinMovimientoConsultar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FECAEASinMovimientoConsultar";
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECAEASinMovimientoConsultar: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FECAEASinMovimientoConsultarResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECAEASinMovimientoInformar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FECAEASinMovimientoInformar";
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECAEASinMovimientoInformar: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FECAEASinMovimientoInformarResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECAEASolicitar = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FECAEASolicitar";
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECAEASolicitar: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FECAEASolicitarResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECAESolicitar = (input, options, extraHeaders) => {
            debug("FECAESolicitar;");
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FECAESolicitar";
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECAESolicitar: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            debug("FECAESolicitar;soapEnvelope: %s", soapEnvelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    return resolve(r.FECAESolicitarResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECompConsultar = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECompConsultar: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FECompConsultar" })
                    .then(r => {
                    return resolve(r.FECompConsultarResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECompTotXRequest = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECompTotXRequest: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FECompTotXRequest" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FECompTotXRequestResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FECompUltimoAutorizado = (input, options, extraHeaders) => {
            extraHeaders = extraHeaders || {};
            extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FECompUltimoAutorizado";
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FECompUltimoAutorizado: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, extraHeaders)
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FECompUltimoAutorizadoResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetCotizacion = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetCotizacion: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetCotizacion" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetCotizacionResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetPtosVenta = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetPtosVenta: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetPtosVenta" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetPtosVentaResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposCbte = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposCbte: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposCbte" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposCbteResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposConcepto = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposConcepto: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposConcepto" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposConceptoResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposDoc = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposDoc: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposDoc" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposDocResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposIva = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposIva: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposIva" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposIvaResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposMonedas = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposMonedas: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposMonedas" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposMonedasResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposOpcional = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposOpcional: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposOpcional" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposOpcionalResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposPaises = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposPaises: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposPaises" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposPaisesResponse);
                })
                    .catch(err => reject(err));
            });
        };
        this.FEParamGetTiposTributos = (input, options, extraHeaders) => {
            const builder = new xml2js.Builder({ headless: true });
            const envelope = {
                "soap:Envelope": {
                    $: {
                        "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                    },
                    "soap:Header": undefined,
                    "soap:Body": {
                        $: { xmlns: "http://ar.gov.afip.dif.FEV1/" },
                        FEParamGetTiposTributos: input
                    }
                }
            };
            const soapEnvelope = builder.buildObject(envelope);
            return new Promise((resolve, reject) => {
                return this.invoke(soapEnvelope, undefined, { SOAPAction: "http://ar.gov.afip.dif.FEV1/FEParamGetTiposTributos" })
                    .then(r => {
                    if (!r) {
                        return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                    }
                    return resolve(r.FEParamGetTiposTributosResponse);
                })
                    .catch(err => reject(err));
            });
        };
    }
    static get serviceId() {
        return "wsfe";
    }
    static get produccionWSDL() {
        return "https://servicios1.afip.gov.ar/wsfev1/service.asmx?WSDL";
    }
    static get testWSDL() {
        return "https://wswhomo.afip.gov.ar/wsfev1/service.asmx?WSDL";
    }
    FEDummy(input, options, extraHeaders) {
        extraHeaders = extraHeaders || {};
        extraHeaders.SOAPAction = "http://ar.gov.afip.dif.FEV1/FEDummy";
        const builder = new xml2js.Builder({ headless: true });
        const envelope = {
            "soap:Envelope": {
                $: {
                    "xmlns:soap": "http://www.w3.org/2003/05/soap-envelope"
                },
                "soap:Header": undefined,
                "soap:Body": {
                    FEDummy: input
                }
            }
        };
        const soapEnvelope = builder.buildObject(envelope);
        debug("soapEnvelope: %s", soapEnvelope);
        return new Promise((resolve, reject) => {
            return this.invoke(soapEnvelope, undefined, extraHeaders)
                .then(r => {
                if (!r) {
                    return reject(new error_server_class_1.BaseError(500, "empty-response", "La respuesta del webservice esta vacia", undefined));
                }
                return resolve(r.FEDummyResponse);
            })
                .catch(err => reject(err));
        });
    }
}
exports.Wsfev1 = Wsfev1;
