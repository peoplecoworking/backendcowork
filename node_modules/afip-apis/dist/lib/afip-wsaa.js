"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginTicket = void 0;
const debug_1 = __importDefault(require("debug"));
const fs = __importStar(require("fs"));
const moment_1 = __importDefault(require("moment"));
const xml2js = __importStar(require("xml2js"));
const wsaa_soap_1 = require("./services/wsaa.soap");
const error_server_class_1 = require("./shared/error.server.class");
const forge = __importStar(require("node-forge"));
const debug = (0, debug_1.default)("afip-apis:wsaa");
const defaultDeltaNow = 2;
class LoginTicket {
    constructor() {
        this.uniqueId = 0;
        this.wsaaLogin = (idServicio, wsaaUrl, certificateFile, keyFile, duracion) => {
            const pp = new Promise((resolve, reject) => {
                let cms = "";
                try {
                    const xmlTra = this.generateTRA(idServicio, duracion);
                    debug("wsaaLogin; tra:%s", xmlTra);
                    cms = this.generateCMS(xmlTra, certificateFile, keyFile);
                    debug("wsaaLogin; cms: %s", cms);
                }
                catch (err) {
                    return reject(new error_server_class_1.BaseError(500, "certificate-files-error", "OcurriÃ³ un error con el certificado", err));
                }
                const login = new wsaa_soap_1.LoginCmsSoap(wsaaUrl);
                return login.loginCms({ in0: cms })
                    .then(response => {
                    debug("wsaaLogin;response:%s", JSON.stringify(response));
                    const parser = new xml2js.Parser({
                        explicitRoot: false, explicitArray: false, ignoreAttrs: true
                    });
                    return parser.parseString(response.loginCmsReturn, (err, result) => {
                        if (err) {
                            return reject(new error_server_class_1.BaseError(500, "xml-parser-error", "Error al procesar datos xml", err));
                        }
                        this._ticket = result;
                        return resolve(this._ticket);
                    });
                })
                    .catch(err => reject(err));
            });
            return pp;
        };
    }
    get ticket() {
        return this._ticket;
    }
    static getInstance() {
        if (!this.instance) {
            this.instance = new LoginTicket();
        }
        return this.instance;
    }
    generateTRA(idServicio, duracion) {
        this.uniqueId += 1;
        const deltaNow = (duracion && !isNaN(+duracion)) ? duracion : defaultDeltaNow;
        debug("generateTRA; uniqueId:%s", this.uniqueId);
        const now = (0, moment_1.default)();
        const ticketRequest = {
            loginTicketRequest: {
                header: {
                    uniqueId: this.uniqueId,
                    generationTime: (0, moment_1.default)(now).add(-5, "m").toISOString(false),
                    expirationTime: (0, moment_1.default)(now).add(+deltaNow, "m").toISOString(false)
                },
                service: idServicio
            }
        };
        debug("generateTRA; ticketRequest:%s", JSON.stringify(ticketRequest));
        const builder = new xml2js.Builder();
        const xmlTicket = builder.buildObject(ticketRequest);
        return xmlTicket;
    }
    generateCMS(data, certificateFile, keyFile) {
        const certificateBuff = fs.readFileSync(certificateFile);
        const keyBuff = fs.readFileSync(keyFile);
        const pki = forge.pki;
        const certificate = pki.certificateFromPem(certificateBuff.toString());
        const p7 = forge.pkcs7.createSignedData();
        p7.content = forge.util.createBuffer(data, "utf8");
        p7.addCertificate(certificate);
        p7.addSigner({
            key: forge.pki.privateKeyFromPem(keyBuff.toString()),
            certificate: certificate,
            digestAlgorithm: forge.pki.oids.sha256,
            authenticatedAttributes: [{
                    type: forge.pki.oids.contentType,
                    value: forge.pki.oids.data
                }, {
                    type: forge.pki.oids.messageDigest
                }, {
                    type: forge.pki.oids.signingTime,
                    value: new Date()
                }]
        });
        p7.sign();
        const asn1 = p7.toAsn1();
        const p12Der = forge.asn1.toDer(asn1).getBytes();
        const p12b64 = forge.util.encode64(p12Der);
        return p12b64;
    }
}
exports.LoginTicket = LoginTicket;
